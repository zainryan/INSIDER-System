// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module streamDownsizer_unsigned_int_512_64_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        inStream_V_V_dout,
        inStream_V_V_empty_n,
        inStream_V_V_read,
        outStream_V_V_din,
        outStream_V_V_full_n,
        outStream_V_V_write,
        input_size_V_dout,
        input_size_V_empty_n,
        input_size_V_read,
        input_size_V_out_din,
        input_size_V_out_full_n,
        input_size_V_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [511:0] inStream_V_V_dout;
input   inStream_V_V_empty_n;
output   inStream_V_V_read;
output  [63:0] outStream_V_V_din;
input   outStream_V_V_full_n;
output   outStream_V_V_write;
input  [39:0] input_size_V_dout;
input   input_size_V_empty_n;
output   input_size_V_read;
output  [39:0] input_size_V_out_din;
input   input_size_V_out_full_n;
output   input_size_V_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg inStream_V_V_read;
reg outStream_V_V_write;
reg input_size_V_read;
reg input_size_V_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    inStream_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_8_i_i_reg_373;
reg    outStream_V_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] exitcond_i_i_reg_359;
reg   [0:0] ap_reg_pp0_iter2_exitcond_i_i_reg_359;
reg    input_size_V_blk_n;
reg    input_size_V_out_blk_n;
reg   [29:0] p_5_i_i_reg_157;
wire   [29:0] tmp_5_i_i_fu_192_p2;
reg   [29:0] tmp_5_i_i_reg_354;
reg    ap_block_state1;
wire   [0:0] exitcond_i_i_fu_203_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_i_reg_359;
wire   [29:0] i_V_fu_208_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] r_V_fu_214_p1;
reg   [2:0] r_V_reg_368;
reg   [2:0] ap_reg_pp0_iter1_r_V_reg_368;
wire   [0:0] tmp_8_i_i_fu_218_p2;
wire   [63:0] tmpValue_V_fu_343_p1;
reg   [63:0] tmpValue_V_reg_377;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
reg   [511:0] p_Val2_s_fu_126;
wire   [31:0] tmp_23_fu_168_p1;
wire   [31:0] tmp_i_i_fu_172_p2;
wire   [28:0] tmp_fu_178_p4;
wire   [29:0] tmp_cast_i_i_fu_188_p1;
wire   [8:0] Lo_assign_fu_232_p3;
wire   [8:0] Hi_assign_fu_239_p2;
wire   [9:0] tmp_26_fu_251_p1;
wire   [9:0] tmp_27_fu_255_p1;
wire   [0:0] tmp_25_fu_245_p2;
wire   [9:0] tmp_29_fu_269_p2;
wire   [9:0] tmp_31_fu_281_p2;
reg   [511:0] tmp_28_fu_259_p4;
wire   [9:0] tmp_30_fu_275_p2;
wire   [9:0] tmp_32_fu_287_p3;
wire   [9:0] tmp_34_fu_303_p3;
wire   [9:0] tmp_35_fu_311_p2;
wire   [511:0] tmp_33_fu_295_p3;
wire   [511:0] tmp_36_fu_317_p1;
wire   [511:0] tmp_37_fu_321_p1;
wire   [511:0] tmp_38_fu_325_p2;
wire   [511:0] tmp_39_fu_331_p2;
wire   [511:0] p_Result_s_fu_337_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (input_size_V_out_full_n == 1'b0) | (input_size_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (input_size_V_out_full_n == 1'b0) | (input_size_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_5_i_i_reg_157 <= i_V_fu_208_p2;
    end else if ((~((real_start == 1'b0) | (input_size_V_out_full_n == 1'b0) | (input_size_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_5_i_i_reg_157 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_i_i_reg_373 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_fu_126 <= inStream_V_V_dout;
    end else if ((~((real_start == 1'b0) | (input_size_V_out_full_n == 1'b0) | (input_size_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_fu_126 <= 512'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond_i_i_reg_359 <= exitcond_i_i_reg_359;
        ap_reg_pp0_iter1_r_V_reg_368 <= r_V_reg_368;
        exitcond_i_i_reg_359 <= exitcond_i_i_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond_i_i_reg_359 <= ap_reg_pp0_iter1_exitcond_i_i_reg_359;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_reg_368 <= r_V_fu_214_p1;
        tmp_8_i_i_reg_373 <= tmp_8_i_i_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_i_i_reg_359 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmpValue_V_reg_377 <= tmpValue_V_fu_343_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (input_size_V_out_full_n == 1'b0) | (input_size_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_5_i_i_reg_354 <= tmp_5_i_i_fu_192_p2;
    end
end

always @ (*) begin
    if ((exitcond_i_i_fu_203_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_8_i_i_reg_373 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_V_blk_n = inStream_V_V_empty_n;
    end else begin
        inStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_8_i_i_reg_373 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inStream_V_V_read = 1'b1;
    end else begin
        inStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_V_blk_n = input_size_V_empty_n;
    end else begin
        input_size_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_V_out_blk_n = input_size_V_out_full_n;
    end else begin
        input_size_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (input_size_V_out_full_n == 1'b0) | (input_size_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_V_out_write = 1'b1;
    end else begin
        input_size_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (input_size_V_out_full_n == 1'b0) | (input_size_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_V_read = 1'b1;
    end else begin
        input_size_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter2_exitcond_i_i_reg_359 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_V_blk_n = outStream_V_V_full_n;
    end else begin
        outStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter2_exitcond_i_i_reg_359 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        outStream_V_V_write = 1'b1;
    end else begin
        outStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (input_size_V_out_full_n == 1'b0) | (input_size_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_i_i_fu_203_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_i_i_fu_203_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_fu_239_p2 = (9'd63 | Lo_assign_fu_232_p3);

assign Lo_assign_fu_232_p3 = {{ap_reg_pp0_iter1_r_V_reg_368}, {6'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_reg_pp0_iter2_exitcond_i_i_reg_359 == 1'd0) & (outStream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((tmp_8_i_i_reg_373 == 1'd1) & (inStream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_reg_pp0_iter2_exitcond_i_i_reg_359 == 1'd0) & (outStream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((tmp_8_i_i_reg_373 == 1'd1) & (inStream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_reg_pp0_iter2_exitcond_i_i_reg_359 == 1'd0) & (outStream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((tmp_8_i_i_reg_373 == 1'd1) & (inStream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (input_size_V_out_full_n == 1'b0) | (input_size_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((tmp_8_i_i_reg_373 == 1'd1) & (inStream_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((ap_reg_pp0_iter2_exitcond_i_i_reg_359 == 1'd0) & (outStream_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_i_i_fu_203_p2 = ((p_5_i_i_reg_157 == tmp_5_i_i_reg_354) ? 1'b1 : 1'b0);

assign i_V_fu_208_p2 = (p_5_i_i_reg_157 + 30'd1);

assign input_size_V_out_din = input_size_V_dout;

assign outStream_V_V_din = tmpValue_V_reg_377;

assign p_Result_s_fu_337_p2 = (tmp_39_fu_331_p2 & tmp_38_fu_325_p2);

assign r_V_fu_214_p1 = p_5_i_i_reg_157[2:0];

assign start_out = real_start;

assign tmpValue_V_fu_343_p1 = p_Result_s_fu_337_p2[63:0];

assign tmp_23_fu_168_p1 = input_size_V_dout[31:0];

assign tmp_25_fu_245_p2 = ((Lo_assign_fu_232_p3 > Hi_assign_fu_239_p2) ? 1'b1 : 1'b0);

assign tmp_26_fu_251_p1 = Lo_assign_fu_232_p3;

assign tmp_27_fu_255_p1 = Hi_assign_fu_239_p2;

integer ap_tvar_int_0;

always @ (p_Val2_s_fu_126) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_28_fu_259_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_28_fu_259_p4[ap_tvar_int_0] = p_Val2_s_fu_126[511 - ap_tvar_int_0];
        end
    end
end

assign tmp_29_fu_269_p2 = (tmp_26_fu_251_p1 - tmp_27_fu_255_p1);

assign tmp_30_fu_275_p2 = (tmp_26_fu_251_p1 ^ 10'd511);

assign tmp_31_fu_281_p2 = (tmp_27_fu_255_p1 - tmp_26_fu_251_p1);

assign tmp_32_fu_287_p3 = ((tmp_25_fu_245_p2[0:0] === 1'b1) ? tmp_29_fu_269_p2 : tmp_31_fu_281_p2);

assign tmp_33_fu_295_p3 = ((tmp_25_fu_245_p2[0:0] === 1'b1) ? tmp_28_fu_259_p4 : p_Val2_s_fu_126);

assign tmp_34_fu_303_p3 = ((tmp_25_fu_245_p2[0:0] === 1'b1) ? tmp_30_fu_275_p2 : tmp_26_fu_251_p1);

assign tmp_35_fu_311_p2 = (10'd511 - tmp_32_fu_287_p3);

assign tmp_36_fu_317_p1 = tmp_34_fu_303_p3;

assign tmp_37_fu_321_p1 = tmp_35_fu_311_p2;

assign tmp_38_fu_325_p2 = tmp_33_fu_295_p3 >> tmp_36_fu_317_p1;

assign tmp_39_fu_331_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> tmp_37_fu_321_p1;

assign tmp_5_i_i_fu_192_p2 = (30'd1 + tmp_cast_i_i_fu_188_p1);

assign tmp_8_i_i_fu_218_p2 = ((r_V_fu_214_p1 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_cast_i_i_fu_188_p1 = tmp_fu_178_p4;

assign tmp_fu_178_p4 = {{tmp_i_i_fu_172_p2[31:3]}};

assign tmp_i_i_fu_172_p2 = ($signed(32'd4294967295) + $signed(tmp_23_fu_168_p1));

endmodule //streamDownsizer_unsigned_int_512_64_s
