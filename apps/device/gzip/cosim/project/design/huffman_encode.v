// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module huffman_encode (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        inStream_V_V_dout,
        inStream_V_V_empty_n,
        inStream_V_V_read,
        outStream_V_V_din,
        outStream_V_V_full_n,
        outStream_V_V_write,
        input_size_V_dout,
        input_size_V_empty_n,
        input_size_V_read,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [255:0] inStream_V_V_dout;
input   inStream_V_V_empty_n;
output   inStream_V_V_read;
output  [63:0] outStream_V_V_din;
input   outStream_V_V_full_n;
output   outStream_V_V_write;
input  [39:0] input_size_V_dout;
input   input_size_V_empty_n;
output   input_size_V_read;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    splitter_U0_ap_start;
wire    splitter_U0_start_full_n;
wire    splitter_U0_ap_done;
wire    splitter_U0_ap_continue;
wire    splitter_U0_ap_idle;
wire    splitter_U0_ap_ready;
wire    splitter_U0_start_out;
wire    splitter_U0_start_write;
wire    splitter_U0_inStream_V_V_read;
wire   [255:0] splitter_U0_outStream0_V_V_din;
wire    splitter_U0_outStream0_V_V_write;
wire   [255:0] splitter_U0_outStream1_V_V_din;
wire    splitter_U0_outStream1_V_V_write;
wire   [255:0] splitter_U0_outStream2_V_V_din;
wire    splitter_U0_outStream2_V_V_write;
wire   [255:0] splitter_U0_outStream3_V_V_din;
wire    splitter_U0_outStream3_V_V_write;
wire   [255:0] splitter_U0_outStream4_V_V_din;
wire    splitter_U0_outStream4_V_V_write;
wire   [255:0] splitter_U0_outStream5_V_V_din;
wire    splitter_U0_outStream5_V_V_write;
wire   [255:0] splitter_U0_outStream6_V_V_din;
wire    splitter_U0_outStream6_V_V_write;
wire   [255:0] splitter_U0_outStream7_V_V_din;
wire    splitter_U0_outStream7_V_V_write;
wire    splitter_U0_input_size_V_read;
wire   [39:0] splitter_U0_input_size_V_out_din;
wire    splitter_U0_input_size_V_out_write;
wire    fixedHuffman106_U0_ap_start;
wire    fixedHuffman106_U0_ap_done;
wire    fixedHuffman106_U0_ap_continue;
wire    fixedHuffman106_U0_ap_idle;
wire    fixedHuffman106_U0_ap_ready;
wire    fixedHuffman106_U0_inStream_V_V_read;
wire   [63:0] fixedHuffman106_U0_outStream_V_V_din;
wire    fixedHuffman106_U0_outStream_V_V_write;
wire   [15:0] fixedHuffman106_U0_outStreamSizeInBits_V_din;
wire    fixedHuffman106_U0_outStreamSizeInBits_V_write;
wire    fixedHuffman107_U0_ap_start;
wire    fixedHuffman107_U0_ap_done;
wire    fixedHuffman107_U0_ap_continue;
wire    fixedHuffman107_U0_ap_idle;
wire    fixedHuffman107_U0_ap_ready;
wire    fixedHuffman107_U0_inStream_V_V_read;
wire   [63:0] fixedHuffman107_U0_outStream_V_V_din;
wire    fixedHuffman107_U0_outStream_V_V_write;
wire   [15:0] fixedHuffman107_U0_outStreamSizeInBits_V_din;
wire    fixedHuffman107_U0_outStreamSizeInBits_V_write;
wire    fixedHuffman108_U0_ap_start;
wire    fixedHuffman108_U0_ap_done;
wire    fixedHuffman108_U0_ap_continue;
wire    fixedHuffman108_U0_ap_idle;
wire    fixedHuffman108_U0_ap_ready;
wire    fixedHuffman108_U0_inStream_V_V_read;
wire   [63:0] fixedHuffman108_U0_outStream_V_V_din;
wire    fixedHuffman108_U0_outStream_V_V_write;
wire   [15:0] fixedHuffman108_U0_outStreamSizeInBits_V_din;
wire    fixedHuffman108_U0_outStreamSizeInBits_V_write;
wire    fixedHuffman109_U0_ap_start;
wire    fixedHuffman109_U0_ap_done;
wire    fixedHuffman109_U0_ap_continue;
wire    fixedHuffman109_U0_ap_idle;
wire    fixedHuffman109_U0_ap_ready;
wire    fixedHuffman109_U0_inStream_V_V_read;
wire   [63:0] fixedHuffman109_U0_outStream_V_V_din;
wire    fixedHuffman109_U0_outStream_V_V_write;
wire   [15:0] fixedHuffman109_U0_outStreamSizeInBits_V_din;
wire    fixedHuffman109_U0_outStreamSizeInBits_V_write;
wire    fixedHuffman110_U0_ap_start;
wire    fixedHuffman110_U0_ap_done;
wire    fixedHuffman110_U0_ap_continue;
wire    fixedHuffman110_U0_ap_idle;
wire    fixedHuffman110_U0_ap_ready;
wire    fixedHuffman110_U0_inStream_V_V_read;
wire   [63:0] fixedHuffman110_U0_outStream_V_V_din;
wire    fixedHuffman110_U0_outStream_V_V_write;
wire   [15:0] fixedHuffman110_U0_outStreamSizeInBits_V_din;
wire    fixedHuffman110_U0_outStreamSizeInBits_V_write;
wire    fixedHuffman111_U0_ap_start;
wire    fixedHuffman111_U0_ap_done;
wire    fixedHuffman111_U0_ap_continue;
wire    fixedHuffman111_U0_ap_idle;
wire    fixedHuffman111_U0_ap_ready;
wire    fixedHuffman111_U0_inStream_V_V_read;
wire   [63:0] fixedHuffman111_U0_outStream_V_V_din;
wire    fixedHuffman111_U0_outStream_V_V_write;
wire   [15:0] fixedHuffman111_U0_outStreamSizeInBits_V_din;
wire    fixedHuffman111_U0_outStreamSizeInBits_V_write;
wire    fixedHuffman112_U0_ap_start;
wire    fixedHuffman112_U0_ap_done;
wire    fixedHuffman112_U0_ap_continue;
wire    fixedHuffman112_U0_ap_idle;
wire    fixedHuffman112_U0_ap_ready;
wire    fixedHuffman112_U0_inStream_V_V_read;
wire   [63:0] fixedHuffman112_U0_outStream_V_V_din;
wire    fixedHuffman112_U0_outStream_V_V_write;
wire   [15:0] fixedHuffman112_U0_outStreamSizeInBits_V_din;
wire    fixedHuffman112_U0_outStreamSizeInBits_V_write;
wire    fixedHuffman_U0_ap_start;
wire    fixedHuffman_U0_ap_done;
wire    fixedHuffman_U0_ap_continue;
wire    fixedHuffman_U0_ap_idle;
wire    fixedHuffman_U0_ap_ready;
wire    fixedHuffman_U0_inStream_V_V_read;
wire   [63:0] fixedHuffman_U0_outStream_V_V_din;
wire    fixedHuffman_U0_outStream_V_V_write;
wire   [15:0] fixedHuffman_U0_outStreamSizeInBits_V_din;
wire    fixedHuffman_U0_outStreamSizeInBits_V_write;
wire    merger_U0_ap_start;
wire    merger_U0_ap_done;
wire    merger_U0_ap_continue;
wire    merger_U0_ap_idle;
wire    merger_U0_ap_ready;
wire   [63:0] merger_U0_outStream_V_V_din;
wire    merger_U0_outStream_V_V_write;
wire    merger_U0_inStream0_V_V_read;
wire    merger_U0_inStreamSizeInBits0_V_read;
wire    merger_U0_inStream1_V_V_read;
wire    merger_U0_inStreamSizeInBits1_V_read;
wire    merger_U0_inStream2_V_V_read;
wire    merger_U0_inStreamSizeInBits2_V_read;
wire    merger_U0_inStream3_V_V_read;
wire    merger_U0_inStreamSizeInBits3_V_read;
wire    merger_U0_inStream4_V_V_read;
wire    merger_U0_inStreamSizeInBits4_V_read;
wire    merger_U0_inStream5_V_V_read;
wire    merger_U0_inStreamSizeInBits5_V_read;
wire    merger_U0_inStream6_V_V_read;
wire    merger_U0_inStreamSizeInBits6_V_read;
wire    merger_U0_inStream7_V_V_read;
wire    merger_U0_inStreamSizeInBits7_V_read;
wire    merger_U0_input_size_V_read;
wire    ap_sync_continue;
wire    inStream0_V_V_full_n;
wire   [255:0] inStream0_V_V_dout;
wire    inStream0_V_V_empty_n;
wire    inStream1_V_V_full_n;
wire   [255:0] inStream1_V_V_dout;
wire    inStream1_V_V_empty_n;
wire    inStream2_V_V_full_n;
wire   [255:0] inStream2_V_V_dout;
wire    inStream2_V_V_empty_n;
wire    inStream3_V_V_full_n;
wire   [255:0] inStream3_V_V_dout;
wire    inStream3_V_V_empty_n;
wire    inStream4_V_V_full_n;
wire   [255:0] inStream4_V_V_dout;
wire    inStream4_V_V_empty_n;
wire    inStream5_V_V_full_n;
wire   [255:0] inStream5_V_V_dout;
wire    inStream5_V_V_empty_n;
wire    inStream6_V_V_full_n;
wire   [255:0] inStream6_V_V_dout;
wire    inStream6_V_V_empty_n;
wire    inStream7_V_V_full_n;
wire   [255:0] inStream7_V_V_dout;
wire    inStream7_V_V_empty_n;
wire    input_size_V_c_i_full_n;
wire   [39:0] input_size_V_c_i_dout;
wire    input_size_V_c_i_empty_n;
wire    outStream0_V_V_full_n;
wire   [63:0] outStream0_V_V_dout;
wire    outStream0_V_V_empty_n;
wire    outStreamSizeInBits0_V_full_n;
wire   [15:0] outStreamSizeInBits0_V_dout;
wire    outStreamSizeInBits0_V_empty_n;
wire    outStream1_V_V_full_n;
wire   [63:0] outStream1_V_V_dout;
wire    outStream1_V_V_empty_n;
wire    outStreamSizeInBits1_V_full_n;
wire   [15:0] outStreamSizeInBits1_V_dout;
wire    outStreamSizeInBits1_V_empty_n;
wire    outStream2_V_V_full_n;
wire   [63:0] outStream2_V_V_dout;
wire    outStream2_V_V_empty_n;
wire    outStreamSizeInBits2_V_full_n;
wire   [15:0] outStreamSizeInBits2_V_dout;
wire    outStreamSizeInBits2_V_empty_n;
wire    outStream3_V_V_full_n;
wire   [63:0] outStream3_V_V_dout;
wire    outStream3_V_V_empty_n;
wire    outStreamSizeInBits3_V_full_n;
wire   [15:0] outStreamSizeInBits3_V_dout;
wire    outStreamSizeInBits3_V_empty_n;
wire    outStream4_V_V_full_n;
wire   [63:0] outStream4_V_V_dout;
wire    outStream4_V_V_empty_n;
wire    outStreamSizeInBits4_V_full_n;
wire   [15:0] outStreamSizeInBits4_V_dout;
wire    outStreamSizeInBits4_V_empty_n;
wire    outStream5_V_V_full_n;
wire   [63:0] outStream5_V_V_dout;
wire    outStream5_V_V_empty_n;
wire    outStreamSizeInBits5_V_full_n;
wire   [15:0] outStreamSizeInBits5_V_dout;
wire    outStreamSizeInBits5_V_empty_n;
wire    outStream6_V_V_full_n;
wire   [63:0] outStream6_V_V_dout;
wire    outStream6_V_V_empty_n;
wire    outStreamSizeInBits6_V_full_n;
wire   [15:0] outStreamSizeInBits6_V_dout;
wire    outStreamSizeInBits6_V_empty_n;
wire    outStream7_V_V_full_n;
wire   [63:0] outStream7_V_V_dout;
wire    outStream7_V_V_empty_n;
wire    outStreamSizeInBits7_V_full_n;
wire   [15:0] outStreamSizeInBits7_V_dout;
wire    outStreamSizeInBits7_V_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_fixedHuffman106_U0_din;
wire    start_for_fixedHuffman106_U0_full_n;
wire   [0:0] start_for_fixedHuffman106_U0_dout;
wire    start_for_fixedHuffman106_U0_empty_n;
wire   [0:0] start_for_fixedHuffman107_U0_din;
wire    start_for_fixedHuffman107_U0_full_n;
wire   [0:0] start_for_fixedHuffman107_U0_dout;
wire    start_for_fixedHuffman107_U0_empty_n;
wire   [0:0] start_for_fixedHuffman108_U0_din;
wire    start_for_fixedHuffman108_U0_full_n;
wire   [0:0] start_for_fixedHuffman108_U0_dout;
wire    start_for_fixedHuffman108_U0_empty_n;
wire   [0:0] start_for_fixedHuffman109_U0_din;
wire    start_for_fixedHuffman109_U0_full_n;
wire   [0:0] start_for_fixedHuffman109_U0_dout;
wire    start_for_fixedHuffman109_U0_empty_n;
wire   [0:0] start_for_fixedHuffman110_U0_din;
wire    start_for_fixedHuffman110_U0_full_n;
wire   [0:0] start_for_fixedHuffman110_U0_dout;
wire    start_for_fixedHuffman110_U0_empty_n;
wire   [0:0] start_for_fixedHuffman111_U0_din;
wire    start_for_fixedHuffman111_U0_full_n;
wire   [0:0] start_for_fixedHuffman111_U0_dout;
wire    start_for_fixedHuffman111_U0_empty_n;
wire   [0:0] start_for_fixedHuffman112_U0_din;
wire    start_for_fixedHuffman112_U0_full_n;
wire   [0:0] start_for_fixedHuffman112_U0_dout;
wire    start_for_fixedHuffman112_U0_empty_n;
wire   [0:0] start_for_fixedHuffman_U0_din;
wire    start_for_fixedHuffman_U0_full_n;
wire   [0:0] start_for_fixedHuffman_U0_dout;
wire    start_for_fixedHuffman_U0_empty_n;
wire   [0:0] start_for_merger_U0_din;
wire    start_for_merger_U0_full_n;
wire   [0:0] start_for_merger_U0_dout;
wire    start_for_merger_U0_empty_n;
wire    fixedHuffman106_U0_start_full_n;
wire    fixedHuffman106_U0_start_write;
wire    fixedHuffman107_U0_start_full_n;
wire    fixedHuffman107_U0_start_write;
wire    fixedHuffman108_U0_start_full_n;
wire    fixedHuffman108_U0_start_write;
wire    fixedHuffman109_U0_start_full_n;
wire    fixedHuffman109_U0_start_write;
wire    fixedHuffman110_U0_start_full_n;
wire    fixedHuffman110_U0_start_write;
wire    fixedHuffman111_U0_start_full_n;
wire    fixedHuffman111_U0_start_write;
wire    fixedHuffman112_U0_start_full_n;
wire    fixedHuffman112_U0_start_write;
wire    fixedHuffman_U0_start_full_n;
wire    fixedHuffman_U0_start_write;
wire    merger_U0_start_full_n;
wire    merger_U0_start_write;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
end

splitter splitter_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(splitter_U0_ap_start),
    .start_full_n(splitter_U0_start_full_n),
    .ap_done(splitter_U0_ap_done),
    .ap_continue(splitter_U0_ap_continue),
    .ap_idle(splitter_U0_ap_idle),
    .ap_ready(splitter_U0_ap_ready),
    .start_out(splitter_U0_start_out),
    .start_write(splitter_U0_start_write),
    .inStream_V_V_dout(inStream_V_V_dout),
    .inStream_V_V_empty_n(inStream_V_V_empty_n),
    .inStream_V_V_read(splitter_U0_inStream_V_V_read),
    .outStream0_V_V_din(splitter_U0_outStream0_V_V_din),
    .outStream0_V_V_full_n(inStream0_V_V_full_n),
    .outStream0_V_V_write(splitter_U0_outStream0_V_V_write),
    .outStream1_V_V_din(splitter_U0_outStream1_V_V_din),
    .outStream1_V_V_full_n(inStream1_V_V_full_n),
    .outStream1_V_V_write(splitter_U0_outStream1_V_V_write),
    .outStream2_V_V_din(splitter_U0_outStream2_V_V_din),
    .outStream2_V_V_full_n(inStream2_V_V_full_n),
    .outStream2_V_V_write(splitter_U0_outStream2_V_V_write),
    .outStream3_V_V_din(splitter_U0_outStream3_V_V_din),
    .outStream3_V_V_full_n(inStream3_V_V_full_n),
    .outStream3_V_V_write(splitter_U0_outStream3_V_V_write),
    .outStream4_V_V_din(splitter_U0_outStream4_V_V_din),
    .outStream4_V_V_full_n(inStream4_V_V_full_n),
    .outStream4_V_V_write(splitter_U0_outStream4_V_V_write),
    .outStream5_V_V_din(splitter_U0_outStream5_V_V_din),
    .outStream5_V_V_full_n(inStream5_V_V_full_n),
    .outStream5_V_V_write(splitter_U0_outStream5_V_V_write),
    .outStream6_V_V_din(splitter_U0_outStream6_V_V_din),
    .outStream6_V_V_full_n(inStream6_V_V_full_n),
    .outStream6_V_V_write(splitter_U0_outStream6_V_V_write),
    .outStream7_V_V_din(splitter_U0_outStream7_V_V_din),
    .outStream7_V_V_full_n(inStream7_V_V_full_n),
    .outStream7_V_V_write(splitter_U0_outStream7_V_V_write),
    .input_size_V_dout(input_size_V_dout),
    .input_size_V_empty_n(input_size_V_empty_n),
    .input_size_V_read(splitter_U0_input_size_V_read),
    .input_size_V_out_din(splitter_U0_input_size_V_out_din),
    .input_size_V_out_full_n(input_size_V_c_i_full_n),
    .input_size_V_out_write(splitter_U0_input_size_V_out_write)
);

fixedHuffman106 fixedHuffman106_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fixedHuffman106_U0_ap_start),
    .ap_done(fixedHuffman106_U0_ap_done),
    .ap_continue(fixedHuffman106_U0_ap_continue),
    .ap_idle(fixedHuffman106_U0_ap_idle),
    .ap_ready(fixedHuffman106_U0_ap_ready),
    .inStream_V_V_dout(inStream0_V_V_dout),
    .inStream_V_V_empty_n(inStream0_V_V_empty_n),
    .inStream_V_V_read(fixedHuffman106_U0_inStream_V_V_read),
    .outStream_V_V_din(fixedHuffman106_U0_outStream_V_V_din),
    .outStream_V_V_full_n(outStream0_V_V_full_n),
    .outStream_V_V_write(fixedHuffman106_U0_outStream_V_V_write),
    .outStreamSizeInBits_V_din(fixedHuffman106_U0_outStreamSizeInBits_V_din),
    .outStreamSizeInBits_V_full_n(outStreamSizeInBits0_V_full_n),
    .outStreamSizeInBits_V_write(fixedHuffman106_U0_outStreamSizeInBits_V_write)
);

fixedHuffman107 fixedHuffman107_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fixedHuffman107_U0_ap_start),
    .ap_done(fixedHuffman107_U0_ap_done),
    .ap_continue(fixedHuffman107_U0_ap_continue),
    .ap_idle(fixedHuffman107_U0_ap_idle),
    .ap_ready(fixedHuffman107_U0_ap_ready),
    .inStream_V_V_dout(inStream1_V_V_dout),
    .inStream_V_V_empty_n(inStream1_V_V_empty_n),
    .inStream_V_V_read(fixedHuffman107_U0_inStream_V_V_read),
    .outStream_V_V_din(fixedHuffman107_U0_outStream_V_V_din),
    .outStream_V_V_full_n(outStream1_V_V_full_n),
    .outStream_V_V_write(fixedHuffman107_U0_outStream_V_V_write),
    .outStreamSizeInBits_V_din(fixedHuffman107_U0_outStreamSizeInBits_V_din),
    .outStreamSizeInBits_V_full_n(outStreamSizeInBits1_V_full_n),
    .outStreamSizeInBits_V_write(fixedHuffman107_U0_outStreamSizeInBits_V_write)
);

fixedHuffman108 fixedHuffman108_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fixedHuffman108_U0_ap_start),
    .ap_done(fixedHuffman108_U0_ap_done),
    .ap_continue(fixedHuffman108_U0_ap_continue),
    .ap_idle(fixedHuffman108_U0_ap_idle),
    .ap_ready(fixedHuffman108_U0_ap_ready),
    .inStream_V_V_dout(inStream2_V_V_dout),
    .inStream_V_V_empty_n(inStream2_V_V_empty_n),
    .inStream_V_V_read(fixedHuffman108_U0_inStream_V_V_read),
    .outStream_V_V_din(fixedHuffman108_U0_outStream_V_V_din),
    .outStream_V_V_full_n(outStream2_V_V_full_n),
    .outStream_V_V_write(fixedHuffman108_U0_outStream_V_V_write),
    .outStreamSizeInBits_V_din(fixedHuffman108_U0_outStreamSizeInBits_V_din),
    .outStreamSizeInBits_V_full_n(outStreamSizeInBits2_V_full_n),
    .outStreamSizeInBits_V_write(fixedHuffman108_U0_outStreamSizeInBits_V_write)
);

fixedHuffman109 fixedHuffman109_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fixedHuffman109_U0_ap_start),
    .ap_done(fixedHuffman109_U0_ap_done),
    .ap_continue(fixedHuffman109_U0_ap_continue),
    .ap_idle(fixedHuffman109_U0_ap_idle),
    .ap_ready(fixedHuffman109_U0_ap_ready),
    .inStream_V_V_dout(inStream3_V_V_dout),
    .inStream_V_V_empty_n(inStream3_V_V_empty_n),
    .inStream_V_V_read(fixedHuffman109_U0_inStream_V_V_read),
    .outStream_V_V_din(fixedHuffman109_U0_outStream_V_V_din),
    .outStream_V_V_full_n(outStream3_V_V_full_n),
    .outStream_V_V_write(fixedHuffman109_U0_outStream_V_V_write),
    .outStreamSizeInBits_V_din(fixedHuffman109_U0_outStreamSizeInBits_V_din),
    .outStreamSizeInBits_V_full_n(outStreamSizeInBits3_V_full_n),
    .outStreamSizeInBits_V_write(fixedHuffman109_U0_outStreamSizeInBits_V_write)
);

fixedHuffman110 fixedHuffman110_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fixedHuffman110_U0_ap_start),
    .ap_done(fixedHuffman110_U0_ap_done),
    .ap_continue(fixedHuffman110_U0_ap_continue),
    .ap_idle(fixedHuffman110_U0_ap_idle),
    .ap_ready(fixedHuffman110_U0_ap_ready),
    .inStream_V_V_dout(inStream4_V_V_dout),
    .inStream_V_V_empty_n(inStream4_V_V_empty_n),
    .inStream_V_V_read(fixedHuffman110_U0_inStream_V_V_read),
    .outStream_V_V_din(fixedHuffman110_U0_outStream_V_V_din),
    .outStream_V_V_full_n(outStream4_V_V_full_n),
    .outStream_V_V_write(fixedHuffman110_U0_outStream_V_V_write),
    .outStreamSizeInBits_V_din(fixedHuffman110_U0_outStreamSizeInBits_V_din),
    .outStreamSizeInBits_V_full_n(outStreamSizeInBits4_V_full_n),
    .outStreamSizeInBits_V_write(fixedHuffman110_U0_outStreamSizeInBits_V_write)
);

fixedHuffman111 fixedHuffman111_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fixedHuffman111_U0_ap_start),
    .ap_done(fixedHuffman111_U0_ap_done),
    .ap_continue(fixedHuffman111_U0_ap_continue),
    .ap_idle(fixedHuffman111_U0_ap_idle),
    .ap_ready(fixedHuffman111_U0_ap_ready),
    .inStream_V_V_dout(inStream5_V_V_dout),
    .inStream_V_V_empty_n(inStream5_V_V_empty_n),
    .inStream_V_V_read(fixedHuffman111_U0_inStream_V_V_read),
    .outStream_V_V_din(fixedHuffman111_U0_outStream_V_V_din),
    .outStream_V_V_full_n(outStream5_V_V_full_n),
    .outStream_V_V_write(fixedHuffman111_U0_outStream_V_V_write),
    .outStreamSizeInBits_V_din(fixedHuffman111_U0_outStreamSizeInBits_V_din),
    .outStreamSizeInBits_V_full_n(outStreamSizeInBits5_V_full_n),
    .outStreamSizeInBits_V_write(fixedHuffman111_U0_outStreamSizeInBits_V_write)
);

fixedHuffman112 fixedHuffman112_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fixedHuffman112_U0_ap_start),
    .ap_done(fixedHuffman112_U0_ap_done),
    .ap_continue(fixedHuffman112_U0_ap_continue),
    .ap_idle(fixedHuffman112_U0_ap_idle),
    .ap_ready(fixedHuffman112_U0_ap_ready),
    .inStream_V_V_dout(inStream6_V_V_dout),
    .inStream_V_V_empty_n(inStream6_V_V_empty_n),
    .inStream_V_V_read(fixedHuffman112_U0_inStream_V_V_read),
    .outStream_V_V_din(fixedHuffman112_U0_outStream_V_V_din),
    .outStream_V_V_full_n(outStream6_V_V_full_n),
    .outStream_V_V_write(fixedHuffman112_U0_outStream_V_V_write),
    .outStreamSizeInBits_V_din(fixedHuffman112_U0_outStreamSizeInBits_V_din),
    .outStreamSizeInBits_V_full_n(outStreamSizeInBits6_V_full_n),
    .outStreamSizeInBits_V_write(fixedHuffman112_U0_outStreamSizeInBits_V_write)
);

fixedHuffman fixedHuffman_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fixedHuffman_U0_ap_start),
    .ap_done(fixedHuffman_U0_ap_done),
    .ap_continue(fixedHuffman_U0_ap_continue),
    .ap_idle(fixedHuffman_U0_ap_idle),
    .ap_ready(fixedHuffman_U0_ap_ready),
    .inStream_V_V_dout(inStream7_V_V_dout),
    .inStream_V_V_empty_n(inStream7_V_V_empty_n),
    .inStream_V_V_read(fixedHuffman_U0_inStream_V_V_read),
    .outStream_V_V_din(fixedHuffman_U0_outStream_V_V_din),
    .outStream_V_V_full_n(outStream7_V_V_full_n),
    .outStream_V_V_write(fixedHuffman_U0_outStream_V_V_write),
    .outStreamSizeInBits_V_din(fixedHuffman_U0_outStreamSizeInBits_V_din),
    .outStreamSizeInBits_V_full_n(outStreamSizeInBits7_V_full_n),
    .outStreamSizeInBits_V_write(fixedHuffman_U0_outStreamSizeInBits_V_write)
);

merger merger_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(merger_U0_ap_start),
    .ap_done(merger_U0_ap_done),
    .ap_continue(merger_U0_ap_continue),
    .ap_idle(merger_U0_ap_idle),
    .ap_ready(merger_U0_ap_ready),
    .outStream_V_V_din(merger_U0_outStream_V_V_din),
    .outStream_V_V_full_n(outStream_V_V_full_n),
    .outStream_V_V_write(merger_U0_outStream_V_V_write),
    .inStream0_V_V_dout(outStream0_V_V_dout),
    .inStream0_V_V_empty_n(outStream0_V_V_empty_n),
    .inStream0_V_V_read(merger_U0_inStream0_V_V_read),
    .inStreamSizeInBits0_V_dout(outStreamSizeInBits0_V_dout),
    .inStreamSizeInBits0_V_empty_n(outStreamSizeInBits0_V_empty_n),
    .inStreamSizeInBits0_V_read(merger_U0_inStreamSizeInBits0_V_read),
    .inStream1_V_V_dout(outStream1_V_V_dout),
    .inStream1_V_V_empty_n(outStream1_V_V_empty_n),
    .inStream1_V_V_read(merger_U0_inStream1_V_V_read),
    .inStreamSizeInBits1_V_dout(outStreamSizeInBits1_V_dout),
    .inStreamSizeInBits1_V_empty_n(outStreamSizeInBits1_V_empty_n),
    .inStreamSizeInBits1_V_read(merger_U0_inStreamSizeInBits1_V_read),
    .inStream2_V_V_dout(outStream2_V_V_dout),
    .inStream2_V_V_empty_n(outStream2_V_V_empty_n),
    .inStream2_V_V_read(merger_U0_inStream2_V_V_read),
    .inStreamSizeInBits2_V_dout(outStreamSizeInBits2_V_dout),
    .inStreamSizeInBits2_V_empty_n(outStreamSizeInBits2_V_empty_n),
    .inStreamSizeInBits2_V_read(merger_U0_inStreamSizeInBits2_V_read),
    .inStream3_V_V_dout(outStream3_V_V_dout),
    .inStream3_V_V_empty_n(outStream3_V_V_empty_n),
    .inStream3_V_V_read(merger_U0_inStream3_V_V_read),
    .inStreamSizeInBits3_V_dout(outStreamSizeInBits3_V_dout),
    .inStreamSizeInBits3_V_empty_n(outStreamSizeInBits3_V_empty_n),
    .inStreamSizeInBits3_V_read(merger_U0_inStreamSizeInBits3_V_read),
    .inStream4_V_V_dout(outStream4_V_V_dout),
    .inStream4_V_V_empty_n(outStream4_V_V_empty_n),
    .inStream4_V_V_read(merger_U0_inStream4_V_V_read),
    .inStreamSizeInBits4_V_dout(outStreamSizeInBits4_V_dout),
    .inStreamSizeInBits4_V_empty_n(outStreamSizeInBits4_V_empty_n),
    .inStreamSizeInBits4_V_read(merger_U0_inStreamSizeInBits4_V_read),
    .inStream5_V_V_dout(outStream5_V_V_dout),
    .inStream5_V_V_empty_n(outStream5_V_V_empty_n),
    .inStream5_V_V_read(merger_U0_inStream5_V_V_read),
    .inStreamSizeInBits5_V_dout(outStreamSizeInBits5_V_dout),
    .inStreamSizeInBits5_V_empty_n(outStreamSizeInBits5_V_empty_n),
    .inStreamSizeInBits5_V_read(merger_U0_inStreamSizeInBits5_V_read),
    .inStream6_V_V_dout(outStream6_V_V_dout),
    .inStream6_V_V_empty_n(outStream6_V_V_empty_n),
    .inStream6_V_V_read(merger_U0_inStream6_V_V_read),
    .inStreamSizeInBits6_V_dout(outStreamSizeInBits6_V_dout),
    .inStreamSizeInBits6_V_empty_n(outStreamSizeInBits6_V_empty_n),
    .inStreamSizeInBits6_V_read(merger_U0_inStreamSizeInBits6_V_read),
    .inStream7_V_V_dout(outStream7_V_V_dout),
    .inStream7_V_V_empty_n(outStream7_V_V_empty_n),
    .inStream7_V_V_read(merger_U0_inStream7_V_V_read),
    .inStreamSizeInBits7_V_dout(outStreamSizeInBits7_V_dout),
    .inStreamSizeInBits7_V_empty_n(outStreamSizeInBits7_V_empty_n),
    .inStreamSizeInBits7_V_read(merger_U0_inStreamSizeInBits7_V_read),
    .input_size_V_dout(input_size_V_c_i_dout),
    .input_size_V_empty_n(input_size_V_c_i_empty_n),
    .input_size_V_read(merger_U0_input_size_V_read)
);

fifo_w256_d256_A inStream0_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(splitter_U0_outStream0_V_V_din),
    .if_full_n(inStream0_V_V_full_n),
    .if_write(splitter_U0_outStream0_V_V_write),
    .if_dout(inStream0_V_V_dout),
    .if_empty_n(inStream0_V_V_empty_n),
    .if_read(fixedHuffman106_U0_inStream_V_V_read)
);

fifo_w256_d256_A inStream1_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(splitter_U0_outStream1_V_V_din),
    .if_full_n(inStream1_V_V_full_n),
    .if_write(splitter_U0_outStream1_V_V_write),
    .if_dout(inStream1_V_V_dout),
    .if_empty_n(inStream1_V_V_empty_n),
    .if_read(fixedHuffman107_U0_inStream_V_V_read)
);

fifo_w256_d256_A inStream2_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(splitter_U0_outStream2_V_V_din),
    .if_full_n(inStream2_V_V_full_n),
    .if_write(splitter_U0_outStream2_V_V_write),
    .if_dout(inStream2_V_V_dout),
    .if_empty_n(inStream2_V_V_empty_n),
    .if_read(fixedHuffman108_U0_inStream_V_V_read)
);

fifo_w256_d256_A inStream3_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(splitter_U0_outStream3_V_V_din),
    .if_full_n(inStream3_V_V_full_n),
    .if_write(splitter_U0_outStream3_V_V_write),
    .if_dout(inStream3_V_V_dout),
    .if_empty_n(inStream3_V_V_empty_n),
    .if_read(fixedHuffman109_U0_inStream_V_V_read)
);

fifo_w256_d256_A inStream4_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(splitter_U0_outStream4_V_V_din),
    .if_full_n(inStream4_V_V_full_n),
    .if_write(splitter_U0_outStream4_V_V_write),
    .if_dout(inStream4_V_V_dout),
    .if_empty_n(inStream4_V_V_empty_n),
    .if_read(fixedHuffman110_U0_inStream_V_V_read)
);

fifo_w256_d256_A inStream5_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(splitter_U0_outStream5_V_V_din),
    .if_full_n(inStream5_V_V_full_n),
    .if_write(splitter_U0_outStream5_V_V_write),
    .if_dout(inStream5_V_V_dout),
    .if_empty_n(inStream5_V_V_empty_n),
    .if_read(fixedHuffman111_U0_inStream_V_V_read)
);

fifo_w256_d256_A inStream6_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(splitter_U0_outStream6_V_V_din),
    .if_full_n(inStream6_V_V_full_n),
    .if_write(splitter_U0_outStream6_V_V_write),
    .if_dout(inStream6_V_V_dout),
    .if_empty_n(inStream6_V_V_empty_n),
    .if_read(fixedHuffman112_U0_inStream_V_V_read)
);

fifo_w256_d256_A inStream7_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(splitter_U0_outStream7_V_V_din),
    .if_full_n(inStream7_V_V_full_n),
    .if_write(splitter_U0_outStream7_V_V_write),
    .if_dout(inStream7_V_V_dout),
    .if_empty_n(inStream7_V_V_empty_n),
    .if_read(fixedHuffman_U0_inStream_V_V_read)
);

fifo_w40_d2_A input_size_V_c_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(splitter_U0_input_size_V_out_din),
    .if_full_n(input_size_V_c_i_full_n),
    .if_write(splitter_U0_input_size_V_out_write),
    .if_dout(input_size_V_c_i_dout),
    .if_empty_n(input_size_V_c_i_empty_n),
    .if_read(merger_U0_input_size_V_read)
);

fifo_w64_d256_A outStream0_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman106_U0_outStream_V_V_din),
    .if_full_n(outStream0_V_V_full_n),
    .if_write(fixedHuffman106_U0_outStream_V_V_write),
    .if_dout(outStream0_V_V_dout),
    .if_empty_n(outStream0_V_V_empty_n),
    .if_read(merger_U0_inStream0_V_V_read)
);

fifo_w16_d8_A outStreamSizeInBits0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman106_U0_outStreamSizeInBits_V_din),
    .if_full_n(outStreamSizeInBits0_V_full_n),
    .if_write(fixedHuffman106_U0_outStreamSizeInBits_V_write),
    .if_dout(outStreamSizeInBits0_V_dout),
    .if_empty_n(outStreamSizeInBits0_V_empty_n),
    .if_read(merger_U0_inStreamSizeInBits0_V_read)
);

fifo_w64_d256_A outStream1_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman107_U0_outStream_V_V_din),
    .if_full_n(outStream1_V_V_full_n),
    .if_write(fixedHuffman107_U0_outStream_V_V_write),
    .if_dout(outStream1_V_V_dout),
    .if_empty_n(outStream1_V_V_empty_n),
    .if_read(merger_U0_inStream1_V_V_read)
);

fifo_w16_d8_A outStreamSizeInBits1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman107_U0_outStreamSizeInBits_V_din),
    .if_full_n(outStreamSizeInBits1_V_full_n),
    .if_write(fixedHuffman107_U0_outStreamSizeInBits_V_write),
    .if_dout(outStreamSizeInBits1_V_dout),
    .if_empty_n(outStreamSizeInBits1_V_empty_n),
    .if_read(merger_U0_inStreamSizeInBits1_V_read)
);

fifo_w64_d256_A outStream2_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman108_U0_outStream_V_V_din),
    .if_full_n(outStream2_V_V_full_n),
    .if_write(fixedHuffman108_U0_outStream_V_V_write),
    .if_dout(outStream2_V_V_dout),
    .if_empty_n(outStream2_V_V_empty_n),
    .if_read(merger_U0_inStream2_V_V_read)
);

fifo_w16_d8_A outStreamSizeInBits2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman108_U0_outStreamSizeInBits_V_din),
    .if_full_n(outStreamSizeInBits2_V_full_n),
    .if_write(fixedHuffman108_U0_outStreamSizeInBits_V_write),
    .if_dout(outStreamSizeInBits2_V_dout),
    .if_empty_n(outStreamSizeInBits2_V_empty_n),
    .if_read(merger_U0_inStreamSizeInBits2_V_read)
);

fifo_w64_d256_A outStream3_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman109_U0_outStream_V_V_din),
    .if_full_n(outStream3_V_V_full_n),
    .if_write(fixedHuffman109_U0_outStream_V_V_write),
    .if_dout(outStream3_V_V_dout),
    .if_empty_n(outStream3_V_V_empty_n),
    .if_read(merger_U0_inStream3_V_V_read)
);

fifo_w16_d8_A outStreamSizeInBits3_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman109_U0_outStreamSizeInBits_V_din),
    .if_full_n(outStreamSizeInBits3_V_full_n),
    .if_write(fixedHuffman109_U0_outStreamSizeInBits_V_write),
    .if_dout(outStreamSizeInBits3_V_dout),
    .if_empty_n(outStreamSizeInBits3_V_empty_n),
    .if_read(merger_U0_inStreamSizeInBits3_V_read)
);

fifo_w64_d256_A outStream4_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman110_U0_outStream_V_V_din),
    .if_full_n(outStream4_V_V_full_n),
    .if_write(fixedHuffman110_U0_outStream_V_V_write),
    .if_dout(outStream4_V_V_dout),
    .if_empty_n(outStream4_V_V_empty_n),
    .if_read(merger_U0_inStream4_V_V_read)
);

fifo_w16_d8_A outStreamSizeInBits4_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman110_U0_outStreamSizeInBits_V_din),
    .if_full_n(outStreamSizeInBits4_V_full_n),
    .if_write(fixedHuffman110_U0_outStreamSizeInBits_V_write),
    .if_dout(outStreamSizeInBits4_V_dout),
    .if_empty_n(outStreamSizeInBits4_V_empty_n),
    .if_read(merger_U0_inStreamSizeInBits4_V_read)
);

fifo_w64_d256_A outStream5_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman111_U0_outStream_V_V_din),
    .if_full_n(outStream5_V_V_full_n),
    .if_write(fixedHuffman111_U0_outStream_V_V_write),
    .if_dout(outStream5_V_V_dout),
    .if_empty_n(outStream5_V_V_empty_n),
    .if_read(merger_U0_inStream5_V_V_read)
);

fifo_w16_d8_A outStreamSizeInBits5_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman111_U0_outStreamSizeInBits_V_din),
    .if_full_n(outStreamSizeInBits5_V_full_n),
    .if_write(fixedHuffman111_U0_outStreamSizeInBits_V_write),
    .if_dout(outStreamSizeInBits5_V_dout),
    .if_empty_n(outStreamSizeInBits5_V_empty_n),
    .if_read(merger_U0_inStreamSizeInBits5_V_read)
);

fifo_w64_d256_A outStream6_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman112_U0_outStream_V_V_din),
    .if_full_n(outStream6_V_V_full_n),
    .if_write(fixedHuffman112_U0_outStream_V_V_write),
    .if_dout(outStream6_V_V_dout),
    .if_empty_n(outStream6_V_V_empty_n),
    .if_read(merger_U0_inStream6_V_V_read)
);

fifo_w16_d8_A outStreamSizeInBits6_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman112_U0_outStreamSizeInBits_V_din),
    .if_full_n(outStreamSizeInBits6_V_full_n),
    .if_write(fixedHuffman112_U0_outStreamSizeInBits_V_write),
    .if_dout(outStreamSizeInBits6_V_dout),
    .if_empty_n(outStreamSizeInBits6_V_empty_n),
    .if_read(merger_U0_inStreamSizeInBits6_V_read)
);

fifo_w64_d256_A outStream7_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman_U0_outStream_V_V_din),
    .if_full_n(outStream7_V_V_full_n),
    .if_write(fixedHuffman_U0_outStream_V_V_write),
    .if_dout(outStream7_V_V_dout),
    .if_empty_n(outStream7_V_V_empty_n),
    .if_read(merger_U0_inStream7_V_V_read)
);

fifo_w16_d8_A outStreamSizeInBits7_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fixedHuffman_U0_outStreamSizeInBits_V_din),
    .if_full_n(outStreamSizeInBits7_V_full_n),
    .if_write(fixedHuffman_U0_outStreamSizeInBits_V_write),
    .if_dout(outStreamSizeInBits7_V_dout),
    .if_empty_n(outStreamSizeInBits7_V_empty_n),
    .if_read(merger_U0_inStreamSizeInBits7_V_read)
);

start_for_fixedHuffman106_U0 start_for_fixedHuffman106_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_fixedHuffman106_U0_din),
    .if_full_n(start_for_fixedHuffman106_U0_full_n),
    .if_write(splitter_U0_start_write),
    .if_dout(start_for_fixedHuffman106_U0_dout),
    .if_empty_n(start_for_fixedHuffman106_U0_empty_n),
    .if_read(fixedHuffman106_U0_ap_ready)
);

start_for_fixedHuffman107_U0 start_for_fixedHuffman107_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_fixedHuffman107_U0_din),
    .if_full_n(start_for_fixedHuffman107_U0_full_n),
    .if_write(splitter_U0_start_write),
    .if_dout(start_for_fixedHuffman107_U0_dout),
    .if_empty_n(start_for_fixedHuffman107_U0_empty_n),
    .if_read(fixedHuffman107_U0_ap_ready)
);

start_for_fixedHuffman108_U0 start_for_fixedHuffman108_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_fixedHuffman108_U0_din),
    .if_full_n(start_for_fixedHuffman108_U0_full_n),
    .if_write(splitter_U0_start_write),
    .if_dout(start_for_fixedHuffman108_U0_dout),
    .if_empty_n(start_for_fixedHuffman108_U0_empty_n),
    .if_read(fixedHuffman108_U0_ap_ready)
);

start_for_fixedHuffman109_U0 start_for_fixedHuffman109_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_fixedHuffman109_U0_din),
    .if_full_n(start_for_fixedHuffman109_U0_full_n),
    .if_write(splitter_U0_start_write),
    .if_dout(start_for_fixedHuffman109_U0_dout),
    .if_empty_n(start_for_fixedHuffman109_U0_empty_n),
    .if_read(fixedHuffman109_U0_ap_ready)
);

start_for_fixedHuffman110_U0 start_for_fixedHuffman110_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_fixedHuffman110_U0_din),
    .if_full_n(start_for_fixedHuffman110_U0_full_n),
    .if_write(splitter_U0_start_write),
    .if_dout(start_for_fixedHuffman110_U0_dout),
    .if_empty_n(start_for_fixedHuffman110_U0_empty_n),
    .if_read(fixedHuffman110_U0_ap_ready)
);

start_for_fixedHuffman111_U0 start_for_fixedHuffman111_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_fixedHuffman111_U0_din),
    .if_full_n(start_for_fixedHuffman111_U0_full_n),
    .if_write(splitter_U0_start_write),
    .if_dout(start_for_fixedHuffman111_U0_dout),
    .if_empty_n(start_for_fixedHuffman111_U0_empty_n),
    .if_read(fixedHuffman111_U0_ap_ready)
);

start_for_fixedHuffman112_U0 start_for_fixedHuffman112_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_fixedHuffman112_U0_din),
    .if_full_n(start_for_fixedHuffman112_U0_full_n),
    .if_write(splitter_U0_start_write),
    .if_dout(start_for_fixedHuffman112_U0_dout),
    .if_empty_n(start_for_fixedHuffman112_U0_empty_n),
    .if_read(fixedHuffman112_U0_ap_ready)
);

start_for_fixedHuffman_U0 start_for_fixedHuffman_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_fixedHuffman_U0_din),
    .if_full_n(start_for_fixedHuffman_U0_full_n),
    .if_write(splitter_U0_start_write),
    .if_dout(start_for_fixedHuffman_U0_dout),
    .if_empty_n(start_for_fixedHuffman_U0_empty_n),
    .if_read(fixedHuffman_U0_ap_ready)
);

start_for_merger_U0 start_for_merger_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_merger_U0_din),
    .if_full_n(start_for_merger_U0_full_n),
    .if_write(splitter_U0_start_write),
    .if_dout(start_for_merger_U0_dout),
    .if_empty_n(start_for_merger_U0_empty_n),
    .if_read(merger_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = merger_U0_ap_done;

assign ap_idle = (splitter_U0_ap_idle & merger_U0_ap_idle & fixedHuffman_U0_ap_idle & fixedHuffman112_U0_ap_idle & fixedHuffman111_U0_ap_idle & fixedHuffman110_U0_ap_idle & fixedHuffman109_U0_ap_idle & fixedHuffman108_U0_ap_idle & fixedHuffman107_U0_ap_idle & fixedHuffman106_U0_ap_idle);

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = merger_U0_ap_done;

assign ap_sync_ready = splitter_U0_ap_ready;

assign fixedHuffman106_U0_ap_continue = 1'b1;

assign fixedHuffman106_U0_ap_start = start_for_fixedHuffman106_U0_empty_n;

assign fixedHuffman106_U0_start_full_n = 1'b1;

assign fixedHuffman106_U0_start_write = 1'b0;

assign fixedHuffman107_U0_ap_continue = 1'b1;

assign fixedHuffman107_U0_ap_start = start_for_fixedHuffman107_U0_empty_n;

assign fixedHuffman107_U0_start_full_n = 1'b1;

assign fixedHuffman107_U0_start_write = 1'b0;

assign fixedHuffman108_U0_ap_continue = 1'b1;

assign fixedHuffman108_U0_ap_start = start_for_fixedHuffman108_U0_empty_n;

assign fixedHuffman108_U0_start_full_n = 1'b1;

assign fixedHuffman108_U0_start_write = 1'b0;

assign fixedHuffman109_U0_ap_continue = 1'b1;

assign fixedHuffman109_U0_ap_start = start_for_fixedHuffman109_U0_empty_n;

assign fixedHuffman109_U0_start_full_n = 1'b1;

assign fixedHuffman109_U0_start_write = 1'b0;

assign fixedHuffman110_U0_ap_continue = 1'b1;

assign fixedHuffman110_U0_ap_start = start_for_fixedHuffman110_U0_empty_n;

assign fixedHuffman110_U0_start_full_n = 1'b1;

assign fixedHuffman110_U0_start_write = 1'b0;

assign fixedHuffman111_U0_ap_continue = 1'b1;

assign fixedHuffman111_U0_ap_start = start_for_fixedHuffman111_U0_empty_n;

assign fixedHuffman111_U0_start_full_n = 1'b1;

assign fixedHuffman111_U0_start_write = 1'b0;

assign fixedHuffman112_U0_ap_continue = 1'b1;

assign fixedHuffman112_U0_ap_start = start_for_fixedHuffman112_U0_empty_n;

assign fixedHuffman112_U0_start_full_n = 1'b1;

assign fixedHuffman112_U0_start_write = 1'b0;

assign fixedHuffman_U0_ap_continue = 1'b1;

assign fixedHuffman_U0_ap_start = start_for_fixedHuffman_U0_empty_n;

assign fixedHuffman_U0_start_full_n = 1'b1;

assign fixedHuffman_U0_start_write = 1'b0;

assign inStream_V_V_read = splitter_U0_inStream_V_V_read;

assign input_size_V_read = splitter_U0_input_size_V_read;

assign internal_ap_ready = ap_sync_ready;

assign merger_U0_ap_continue = ap_continue;

assign merger_U0_ap_start = start_for_merger_U0_empty_n;

assign merger_U0_start_full_n = 1'b1;

assign merger_U0_start_write = 1'b0;

assign outStream_V_V_din = merger_U0_outStream_V_V_din;

assign outStream_V_V_write = merger_U0_outStream_V_V_write;

assign splitter_U0_ap_continue = 1'b1;

assign splitter_U0_ap_start = real_start;

assign splitter_U0_start_full_n = (start_for_merger_U0_full_n & start_for_fixedHuffman_U0_full_n & start_for_fixedHuffman112_U0_full_n & start_for_fixedHuffman111_U0_full_n & start_for_fixedHuffman110_U0_full_n & start_for_fixedHuffman109_U0_full_n & start_for_fixedHuffman108_U0_full_n & start_for_fixedHuffman107_U0_full_n & start_for_fixedHuffman106_U0_full_n);

assign start_for_fixedHuffman106_U0_din = 1'b1;

assign start_for_fixedHuffman107_U0_din = 1'b1;

assign start_for_fixedHuffman108_U0_din = 1'b1;

assign start_for_fixedHuffman109_U0_din = 1'b1;

assign start_for_fixedHuffman110_U0_din = 1'b1;

assign start_for_fixedHuffman111_U0_din = 1'b1;

assign start_for_fixedHuffman112_U0_din = 1'b1;

assign start_for_fixedHuffman_U0_din = 1'b1;

assign start_for_merger_U0_din = 1'b1;

assign start_out = real_start;

endmodule //huffman_encode
