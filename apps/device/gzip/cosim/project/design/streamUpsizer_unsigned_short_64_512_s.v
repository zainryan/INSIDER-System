// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module streamUpsizer_unsigned_short_64_512_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        inStream_V_V_dout,
        inStream_V_V_empty_n,
        inStream_V_V_read,
        outStream_V_V_din,
        outStream_V_V_full_n,
        outStream_V_V_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_pp0_stage0 = 7'd8;
parameter    ap_ST_fsm_state7 = 7'd16;
parameter    ap_ST_fsm_state8 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] inStream_V_V_dout;
input   inStream_V_V_empty_n;
output   inStream_V_V_read;
output  [511:0] outStream_V_V_din;
input   outStream_V_V_full_n;
output   outStream_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg inStream_V_V_read;
reg[511:0] outStream_V_V_din;
reg outStream_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    inStream_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_10_reg_441;
reg    outStream_V_V_blk_n;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_2_reg_426;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_reg_470;
wire    ap_CS_fsm_state7;
wire   [0:0] phitmp_fu_377_p2;
wire   [0:0] tmp_3_fu_382_p2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [31:0] i_reg_132;
wire   [15:0] size_fu_159_p1;
reg   [15:0] size_reg_414;
wire   [15:0] outSize_fu_183_p3;
reg   [15:0] outSize_reg_421;
wire   [0:0] tmp_2_fu_191_p2;
wire   [31:0] tmp_7_fu_201_p1;
reg   [31:0] tmp_7_reg_430;
reg    ap_block_state3;
wire   [31:0] p_cast_fu_231_p1;
reg   [31:0] p_cast_reg_436;
wire   [0:0] tmp_10_fu_235_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] i_1_fu_240_p2;
reg   [31:0] i_1_reg_445;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_s_fu_246_p2;
reg   [0:0] tmp_s_reg_450;
wire   [31:0] chunk_size_fu_251_p2;
reg   [31:0] chunk_size_reg_455;
reg   [63:0] tmp_V_2_reg_460;
wire   [6:0] tmp_11_fu_262_p1;
reg   [6:0] tmp_11_reg_465;
wire   [0:0] icmp_fu_282_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [31:0] ap_phi_mux_i_phi_fu_136_p4;
reg    ap_predicate_op82_write_state7;
reg    ap_block_state7;
wire   [511:0] tmp_V_1_fu_197_p1;
wire   [511:0] tmp_V_3_fu_348_p1;
reg    ap_block_pp0_stage0_01001;
wire   [511:0] tmp_V_4_fu_388_p1;
wire   [511:0] tmp_V_5_fu_393_p1;
reg   [31:0] val_assign_1_fu_110;
reg    ap_block_state1;
wire   [31:0] byteIdx_1_fu_288_p2;
wire   [31:0] byteIdx_fu_266_p2;
reg   [1023:0] p_Val2_s_fu_114;
wire   [1023:0] outBuffer_V_2_fu_363_p1;
wire   [1023:0] p_Result_s_fu_342_p2;
wire   [15:0] tmp_fu_163_p1;
wire   [15:0] tmp_1_fu_167_p2;
wire   [9:0] tmp_6_fu_173_p4;
wire   [16:0] tmp_7_cast_fu_204_p1;
wire   [16:0] tmp_4_fu_207_p2;
wire   [13:0] tmp_8_fu_213_p4;
wire   [16:0] tmp_9_fu_223_p3;
wire   [31:0] p_s_fu_256_p3;
wire   [25:0] tmp_20_fu_272_p4;
wire   [9:0] tmp_12_fu_304_p3;
wire   [1023:0] tmp_13_fu_311_p1;
wire   [1023:0] tmp_14_fu_315_p2;
wire   [1023:0] tmp_15_fu_321_p2;
wire   [1023:0] tmp_17_fu_333_p1;
wire   [1023:0] tmp_16_fu_327_p2;
wire   [1023:0] tmp_18_fu_336_p2;
wire   [511:0] outBuffer_V_fu_353_p4;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((tmp_2_reg_426 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((tmp_2_reg_426 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_441 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_132 <= i_1_reg_445;
    end else if ((~((tmp_2_reg_426 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_132 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_reg_470 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_fu_114 <= p_Result_s_fu_342_p2;
    end else if (((icmp_reg_470 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_fu_114 <= outBuffer_V_2_fu_363_p1;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_fu_114 <= 1024'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        val_assign_1_fu_110 <= byteIdx_fu_266_p2;
    end else if (((icmp_fu_282_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        val_assign_1_fu_110 <= byteIdx_1_fu_288_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_1_fu_110 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        chunk_size_reg_455 <= chunk_size_fu_251_p2;
        tmp_s_reg_450 <= tmp_s_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_1_reg_445 <= i_1_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_441 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_reg_470 <= icmp_fu_282_p2;
        tmp_11_reg_465 <= tmp_11_fu_262_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((inStream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        outSize_reg_421[15 : 6] <= outSize_fu_183_p3[15 : 6];
        size_reg_414 <= size_fu_159_p1;
        tmp_2_reg_426 <= tmp_2_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_2_reg_426 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        p_cast_reg_436[16 : 3] <= p_cast_fu_231_p1[16 : 3];
        tmp_7_reg_430[15 : 0] <= tmp_7_fu_201_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_10_reg_441 <= tmp_10_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_441 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_2_reg_460 <= inStream_V_V_dout;
    end
end

always @ (*) begin
    if ((tmp_10_fu_235_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_reg_441 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_136_p4 = i_1_reg_445;
    end else begin
        ap_phi_mux_i_phi_fu_136_p4 = i_reg_132;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((tmp_10_reg_441 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        inStream_V_V_blk_n = inStream_V_V_empty_n;
    end else begin
        inStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_10_reg_441 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((inStream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        inStream_V_V_read = 1'b1;
    end else begin
        inStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((tmp_3_fu_382_p2 == 1'd0) & (phitmp_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_2_reg_426 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_reg_470 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        outStream_V_V_blk_n = outStream_V_V_full_n;
    end else begin
        outStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        outStream_V_V_din = 512'd0;
    end else if (((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        outStream_V_V_din = tmp_V_5_fu_393_p1;
    end else if ((~((outStream_V_V_full_n == 1'b0) & (ap_predicate_op82_write_state7 == 1'b1)) & (1'b1 == ap_CS_fsm_state7) & (ap_predicate_op82_write_state7 == 1'b1))) begin
        outStream_V_V_din = tmp_V_4_fu_388_p1;
    end else if (((icmp_reg_470 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outStream_V_V_din = tmp_V_3_fu_348_p1;
    end else if ((~((tmp_2_reg_426 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (tmp_2_reg_426 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        outStream_V_V_din = tmp_V_1_fu_197_p1;
    end else begin
        outStream_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((outStream_V_V_full_n == 1'b0) & (ap_predicate_op82_write_state7 == 1'b1)) & (1'b1 == ap_CS_fsm_state7) & (ap_predicate_op82_write_state7 == 1'b1)) | ((icmp_reg_470 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((tmp_2_reg_426 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (tmp_2_reg_426 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        outStream_V_V_write = 1'b1;
    end else begin
        outStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((inStream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((tmp_2_reg_426 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_10_fu_235_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_10_fu_235_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((outStream_V_V_full_n == 1'b0) & (ap_predicate_op82_write_state7 == 1'b1)) & (tmp_3_fu_382_p2 == 1'd1) & (phitmp_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((outStream_V_V_full_n == 1'b0) & (ap_predicate_op82_write_state7 == 1'b1)) & (tmp_3_fu_382_p2 == 1'd0) & (phitmp_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if ((~((outStream_V_V_full_n == 1'b0) & (ap_predicate_op82_write_state7 == 1'b1)) & (phitmp_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_reg_470 == 1'd0) & (outStream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_10_reg_441 == 1'd0) & (inStream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_reg_470 == 1'd0) & (outStream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_10_reg_441 == 1'd0) & (inStream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_reg_470 == 1'd0) & (outStream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_10_reg_441 == 1'd0) & (inStream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((tmp_2_reg_426 == 1'd0) & (outStream_V_V_full_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((tmp_10_reg_441 == 1'd0) & (inStream_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = ((icmp_reg_470 == 1'd0) & (outStream_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((outStream_V_V_full_n == 1'b0) & (ap_predicate_op82_write_state7 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op82_write_state7 = ((tmp_3_fu_382_p2 == 1'd0) & (phitmp_fu_377_p2 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign byteIdx_1_fu_288_p2 = ($signed(32'd4294967232) + $signed(byteIdx_fu_266_p2));

assign byteIdx_fu_266_p2 = (val_assign_1_fu_110 + p_s_fu_256_p3);

assign chunk_size_fu_251_p2 = (tmp_7_reg_430 - ap_phi_mux_i_phi_fu_136_p4);

assign i_1_fu_240_p2 = (ap_phi_mux_i_phi_fu_136_p4 + 32'd8);

assign icmp_fu_282_p2 = ((tmp_20_fu_272_p4 == 26'd0) ? 1'b1 : 1'b0);

assign outBuffer_V_2_fu_363_p1 = outBuffer_V_fu_353_p4;

assign outBuffer_V_fu_353_p4 = {{p_Result_s_fu_342_p2[1023:512]}};

assign outSize_fu_183_p3 = {{tmp_6_fu_173_p4}, {6'd0}};

assign p_Result_s_fu_342_p2 = (tmp_18_fu_336_p2 | tmp_16_fu_327_p2);

assign p_cast_fu_231_p1 = tmp_9_fu_223_p3;

assign p_s_fu_256_p3 = ((tmp_s_reg_450[0:0] === 1'b1) ? chunk_size_reg_455 : 32'd8);

assign phitmp_fu_377_p2 = ((size_reg_414 != 16'd0) ? 1'b1 : 1'b0);

assign size_fu_159_p1 = inStream_V_V_dout[15:0];

assign start_out = real_start;

assign tmp_10_fu_235_p2 = ((ap_phi_mux_i_phi_fu_136_p4 == p_cast_reg_436) ? 1'b1 : 1'b0);

assign tmp_11_fu_262_p1 = val_assign_1_fu_110[6:0];

assign tmp_12_fu_304_p3 = {{tmp_11_reg_465}, {3'd0}};

assign tmp_13_fu_311_p1 = tmp_12_fu_304_p3;

assign tmp_14_fu_315_p2 = 1024'd18446744073709551615 << tmp_13_fu_311_p1;

assign tmp_15_fu_321_p2 = (tmp_14_fu_315_p2 ^ 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215);

assign tmp_16_fu_327_p2 = (tmp_15_fu_321_p2 & p_Val2_s_fu_114);

assign tmp_17_fu_333_p1 = tmp_V_2_reg_460;

assign tmp_18_fu_336_p2 = tmp_17_fu_333_p1 << tmp_13_fu_311_p1;

assign tmp_1_fu_167_p2 = (size_fu_159_p1 + tmp_fu_163_p1);

assign tmp_20_fu_272_p4 = {{byteIdx_fu_266_p2[31:6]}};

assign tmp_2_fu_191_p2 = ((outSize_fu_183_p3 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_382_p2 = ((val_assign_1_fu_110 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_4_fu_207_p2 = (tmp_7_cast_fu_204_p1 + 17'd7);

assign tmp_6_fu_173_p4 = {{tmp_1_fu_167_p2[15:6]}};

assign tmp_7_cast_fu_204_p1 = size_reg_414;

assign tmp_7_fu_201_p1 = size_reg_414;

assign tmp_8_fu_213_p4 = {{tmp_4_fu_207_p2[16:3]}};

assign tmp_9_fu_223_p3 = {{tmp_8_fu_213_p4}, {3'd0}};

assign tmp_V_1_fu_197_p1 = outSize_reg_421;

assign tmp_V_3_fu_348_p1 = p_Result_s_fu_342_p2[511:0];

assign tmp_V_4_fu_388_p1 = val_assign_1_fu_110;

assign tmp_V_5_fu_393_p1 = p_Val2_s_fu_114[511:0];

assign tmp_fu_163_p1 = val_assign_1_fu_110[15:0];

assign tmp_s_fu_246_p2 = (($signed(i_1_fu_240_p2) > $signed(tmp_7_reg_430)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    outSize_reg_421[5:0] <= 6'b000000;
    tmp_7_reg_430[31:16] <= 16'b0000000000000000;
    p_cast_reg_436[2:0] <= 3'b000;
    p_cast_reg_436[31:17] <= 15'b000000000000000;
end

endmodule //streamUpsizer_unsigned_short_64_512_s
