// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pcie_read_throttle_unit,hls_ip_2017_4_op,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.196250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=740,HLS_SYN_LUT=581}" *)

module pcie_read_throttle_unit (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
ap_continue,
        ap_idle,
        ap_ready,
        dma_read_throttle_params_V_dout,
        dma_read_throttle_params_V_empty_n,
        dma_read_throttle_params_V_read,
        before_throttle_pcie_read_resp_V_last_dout,
        before_throttle_pcie_read_resp_V_last_empty_n,
        before_throttle_pcie_read_resp_V_last_read,
        before_throttle_pcie_read_resp_V_data_V_dout,
        before_throttle_pcie_read_resp_V_data_V_empty_n,
        before_throttle_pcie_read_resp_V_data_V_read,
        after_throttle_pcie_read_resp_V_last_din,
        after_throttle_pcie_read_resp_V_last_full_n,
        after_throttle_pcie_read_resp_V_last_write,
        after_throttle_pcie_read_resp_V_data_V_din,
        after_throttle_pcie_read_resp_V_data_V_full_n,
        after_throttle_pcie_read_resp_V_data_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output ap_ready; output ap_continue;
input  [31:0] dma_read_throttle_params_V_dout;
input   dma_read_throttle_params_V_empty_n;
output   dma_read_throttle_params_V_read;
input   before_throttle_pcie_read_resp_V_last_dout;
input   before_throttle_pcie_read_resp_V_last_empty_n;
output   before_throttle_pcie_read_resp_V_last_read;
input  [511:0] before_throttle_pcie_read_resp_V_data_V_dout;
input   before_throttle_pcie_read_resp_V_data_V_empty_n;
output   before_throttle_pcie_read_resp_V_data_V_read;
output   after_throttle_pcie_read_resp_V_last_din;
input   after_throttle_pcie_read_resp_V_last_full_n;
output   after_throttle_pcie_read_resp_V_last_write;
output  [511:0] after_throttle_pcie_read_resp_V_data_V_din;
input   after_throttle_pcie_read_resp_V_data_V_full_n;
output   after_throttle_pcie_read_resp_V_data_V_write;

reg ap_idle;
reg dma_read_throttle_params_V_read;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] throttle_threshold_reg_162;
reg   [31:0] throttle_cnt_reg_173;
reg   [0:0] valid_read_resp_reg_184;
reg   [0:0] empty_n_reg_504;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [15:0] throttle_cnt_2_fu_269_p1;
reg   [15:0] throttle_cnt_2_reg_513;
reg   [15:0] throttle_threshold_1_reg_518;
wire   [31:0] throttle_threshold_3_fu_306_p3;
reg   [31:0] throttle_threshold_3_reg_523;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] throttle_cnt_1_fu_313_p3;
reg   [31:0] throttle_cnt_1_reg_528;
wire   [0:0] read_resp_stall_1_fu_325_p2;
wire   [0:0] empty_n_2_fu_339_p1;
reg   [0:0] ap_phi_mux_valid_read_resp_phi_fu_188_p4;
wire   [0:0] or_cond_fu_371_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] ap_phi_mux_throttle_threshold_phi_fu_166_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_throttle_cnt_phi_fu_177_p4;
reg   [0:0] ap_phi_mux_valid_read_resp_5_phi_fu_222_p4;
wire   [0:0] ap_phi_mux_valid_read_resp_3_phi_fu_201_p10;
wire   [0:0] ap_phi_reg_pp0_iter0_valid_read_resp_3_reg_196;
reg   [0:0] ap_phi_reg_pp0_iter1_valid_read_resp_3_reg_196;
reg   [0:0] ap_phi_reg_pp0_iter2_valid_read_resp_3_reg_196;
wire   [0:0] not_full_n_i_fu_459_p2;
wire   [0:0] ap_phi_reg_pp0_iter2_valid_read_resp_5_reg_218;
reg    before_throttle_pcie_read_resp_V_last0_update;
wire   [0:0] empty_n_1_nbread_fu_144_p3_0;
reg    after_throttle_pcie_read_resp_V_last1_update;
wire   [0:0] full_n_nbwrite_fu_152_p5;
wire    ap_block_pp0_stage0_01001;
reg   [31:0] read_resp_stall_times_fu_118;
wire   [31:0] read_resp_stall_times_1_fu_331_p3;
wire   [31:0] p_s_fu_428_p3;
reg   [0:0] read_resp_stall_fu_122;
wire   [0:0] tmp_s_fu_381_p2;
wire   [0:0] not_s_fu_422_p2;
reg   [24:0] read_resp_contiguous_times_V_1_fu_126;
wire   [24:0] p_1_fu_387_p3;
wire   [24:0] read_resp_contiguous_times_V_fu_353_p2;
wire   [24:0] p_0_1_fu_298_p3;
reg   [0:0] tmp_last_fu_130;
reg   [511:0] tmp_data_V_fu_134;
wire   [31:0] throttle_threshold_2_fu_292_p1;
wire   [31:0] throttle_cnt_2_cast_fu_295_p1;
wire   [0:0] not_empty_n_fu_320_p2;
wire   [0:0] tmp_7_fu_359_p2;
wire   [0:0] tmp_8_fu_365_p2;
wire   [31:0] tmp_9_fu_377_p1;
wire   [31:0] read_resp_stall_times_2_fu_410_p2;
wire   [0:0] tmp_4_fu_416_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((or_cond_fu_371_p2 == 1'd0) & (ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd1) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((or_cond_fu_371_p2 == 1'd1) & (ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd1) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_reg_pp0_iter2_valid_read_resp_3_reg_196 <= 1'd1;
    end else if ((((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd0) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (read_resp_stall_1_fu_325_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_reg_pp0_iter2_valid_read_resp_3_reg_196 <= 1'd0;
    end else if (((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_valid_read_resp_3_reg_196 <= ap_phi_mux_valid_read_resp_phi_fu_188_p4;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_valid_read_resp_3_reg_196 <= ap_phi_reg_pp0_iter1_valid_read_resp_3_reg_196;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (read_resp_stall_1_fu_325_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        read_resp_contiguous_times_V_1_fu_126 <= p_0_1_fu_298_p3;
    end else if (((or_cond_fu_371_p2 == 1'd1) & (ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd1) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        read_resp_contiguous_times_V_1_fu_126 <= read_resp_contiguous_times_V_fu_353_p2;
    end else if (((or_cond_fu_371_p2 == 1'd0) & (ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd1) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        read_resp_contiguous_times_V_1_fu_126 <= p_1_fu_387_p3;
    end else if ((((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd0) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        read_resp_contiguous_times_V_1_fu_126 <= 25'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        read_resp_stall_fu_122 <= read_resp_stall_1_fu_325_p2;
    end else if (((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (read_resp_stall_1_fu_325_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        read_resp_stall_fu_122 <= not_s_fu_422_p2;
    end else if (((or_cond_fu_371_p2 == 1'd0) & (ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd1) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        read_resp_stall_fu_122 <= tmp_s_fu_381_p2;
    end else if ((((or_cond_fu_371_p2 == 1'd1) & (ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd1) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd0) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        read_resp_stall_fu_122 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (read_resp_stall_1_fu_325_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        read_resp_stall_times_fu_118 <= p_s_fu_428_p3;
    end else if ((((or_cond_fu_371_p2 == 1'd0) & (ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd1) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((or_cond_fu_371_p2 == 1'd1) & (ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd1) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd0) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        read_resp_stall_times_fu_118 <= read_resp_stall_times_1_fu_331_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        read_resp_stall_times_fu_118 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        throttle_cnt_reg_173 <= throttle_cnt_1_reg_528;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        throttle_cnt_reg_173 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        throttle_threshold_reg_162 <= throttle_threshold_3_reg_523;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        throttle_threshold_reg_162 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        valid_read_resp_reg_184 <= ap_phi_mux_valid_read_resp_5_phi_fu_222_p4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        valid_read_resp_reg_184 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_valid_read_resp_3_reg_196 <= ap_phi_reg_pp0_iter0_valid_read_resp_3_reg_196;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_n_reg_504 <= dma_read_throttle_params_V_empty_n;
        throttle_cnt_2_reg_513 <= throttle_cnt_2_fu_269_p1;
        throttle_threshold_1_reg_518 <= {{dma_read_throttle_params_V_dout[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        throttle_cnt_1_reg_528 <= throttle_cnt_1_fu_313_p3;
        throttle_threshold_3_reg_523 <= throttle_threshold_3_fu_306_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((or_cond_fu_371_p2 == 1'd0) & (ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd1) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((or_cond_fu_371_p2 == 1'd1) & (ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd1) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (empty_n_2_fu_339_p1 == 1'd0) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        tmp_data_V_fu_134 <= before_throttle_pcie_read_resp_V_data_V_dout;
        tmp_last_fu_130 <= before_throttle_pcie_read_resp_V_last_dout;
    end
end

always @ (*) begin
    if (((ap_phi_mux_valid_read_resp_3_phi_fu_201_p10 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & ((after_throttle_pcie_read_resp_V_last_full_n & after_throttle_pcie_read_resp_V_data_V_full_n) == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        after_throttle_pcie_read_resp_V_last1_update = 1'b1;
    end else begin
        after_throttle_pcie_read_resp_V_last1_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_throttle_cnt_phi_fu_177_p4 = throttle_cnt_1_reg_528;
    end else begin
        ap_phi_mux_throttle_cnt_phi_fu_177_p4 = throttle_cnt_reg_173;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_throttle_threshold_phi_fu_166_p4 = throttle_threshold_3_reg_523;
    end else begin
        ap_phi_mux_throttle_threshold_phi_fu_166_p4 = throttle_threshold_reg_162;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((ap_phi_mux_valid_read_resp_3_phi_fu_201_p10 == 1'd0)) begin
            ap_phi_mux_valid_read_resp_5_phi_fu_222_p4 = ap_phi_reg_pp0_iter2_valid_read_resp_3_reg_196;
        end else if ((ap_phi_mux_valid_read_resp_3_phi_fu_201_p10 == 1'd1)) begin
            ap_phi_mux_valid_read_resp_5_phi_fu_222_p4 = not_full_n_i_fu_459_p2;
        end else begin
            ap_phi_mux_valid_read_resp_5_phi_fu_222_p4 = ap_phi_reg_pp0_iter2_valid_read_resp_5_reg_218;
        end
    end else begin
        ap_phi_mux_valid_read_resp_5_phi_fu_222_p4 = ap_phi_reg_pp0_iter2_valid_read_resp_5_reg_218;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_valid_read_resp_phi_fu_188_p4 = ap_phi_mux_valid_read_resp_5_phi_fu_222_p4;
    end else begin
        ap_phi_mux_valid_read_resp_phi_fu_188_p4 = valid_read_resp_reg_184;
    end
end

always @ (*) begin
    if (((ap_phi_mux_valid_read_resp_phi_fu_188_p4 == 1'd0) & (read_resp_stall_1_fu_325_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((before_throttle_pcie_read_resp_V_last_empty_n & before_throttle_pcie_read_resp_V_data_V_empty_n) == 1'b1))) begin
        before_throttle_pcie_read_resp_V_last0_update = 1'b1;
    end else begin
        before_throttle_pcie_read_resp_V_last0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (dma_read_throttle_params_V_empty_n == 1'b1))) begin
        dma_read_throttle_params_V_read = 1'b1;
    end else begin
        dma_read_throttle_params_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign after_throttle_pcie_read_resp_V_data_V_din = tmp_data_V_fu_134;

assign after_throttle_pcie_read_resp_V_data_V_write = after_throttle_pcie_read_resp_V_last1_update;

assign after_throttle_pcie_read_resp_V_last_din = tmp_last_fu_130;

assign after_throttle_pcie_read_resp_V_last_write = after_throttle_pcie_read_resp_V_last1_update;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_done = 1'b0;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_valid_read_resp_3_phi_fu_201_p10 = ap_phi_reg_pp0_iter2_valid_read_resp_3_reg_196;

assign ap_phi_reg_pp0_iter0_valid_read_resp_3_reg_196 = 'bx;

assign ap_phi_reg_pp0_iter2_valid_read_resp_5_reg_218 = 'bx;

assign ap_ready = 1'b0;

assign before_throttle_pcie_read_resp_V_data_V_read = before_throttle_pcie_read_resp_V_last0_update;

assign before_throttle_pcie_read_resp_V_last_read = before_throttle_pcie_read_resp_V_last0_update;

assign empty_n_1_nbread_fu_144_p3_0 = (before_throttle_pcie_read_resp_V_last_empty_n & before_throttle_pcie_read_resp_V_data_V_empty_n);

assign empty_n_2_fu_339_p1 = empty_n_1_nbread_fu_144_p3_0;

assign full_n_nbwrite_fu_152_p5 = (after_throttle_pcie_read_resp_V_last_full_n & after_throttle_pcie_read_resp_V_data_V_full_n);

assign not_empty_n_fu_320_p2 = (empty_n_reg_504 ^ 1'd1);

assign not_full_n_i_fu_459_p2 = (full_n_nbwrite_fu_152_p5 ^ 1'd1);

assign not_s_fu_422_p2 = (tmp_4_fu_416_p2 ^ 1'd1);

assign or_cond_fu_371_p2 = (tmp_8_fu_365_p2 | tmp_7_fu_359_p2);

assign p_0_1_fu_298_p3 = ((empty_n_reg_504[0:0] === 1'b1) ? 25'd0 : read_resp_contiguous_times_V_1_fu_126);

assign p_1_fu_387_p3 = ((tmp_s_fu_381_p2[0:0] === 1'b1) ? 25'd0 : read_resp_contiguous_times_V_fu_353_p2);

assign p_s_fu_428_p3 = ((tmp_4_fu_416_p2[0:0] === 1'b1) ? 32'd0 : read_resp_stall_times_2_fu_410_p2);

assign read_resp_contiguous_times_V_fu_353_p2 = (p_0_1_fu_298_p3 + 25'd1);

assign read_resp_stall_1_fu_325_p2 = (read_resp_stall_fu_122 & not_empty_n_fu_320_p2);

assign read_resp_stall_times_1_fu_331_p3 = ((empty_n_reg_504[0:0] === 1'b1) ? 32'd0 : read_resp_stall_times_fu_118);

assign read_resp_stall_times_2_fu_410_p2 = (read_resp_stall_times_1_fu_331_p3 + 32'd1);

assign throttle_cnt_1_fu_313_p3 = ((empty_n_reg_504[0:0] === 1'b1) ? throttle_cnt_2_cast_fu_295_p1 : ap_phi_mux_throttle_cnt_phi_fu_177_p4);

assign throttle_cnt_2_cast_fu_295_p1 = throttle_cnt_2_reg_513;

assign throttle_cnt_2_fu_269_p1 = dma_read_throttle_params_V_dout[15:0];

assign throttle_threshold_2_fu_292_p1 = throttle_threshold_1_reg_518;

assign throttle_threshold_3_fu_306_p3 = ((empty_n_reg_504[0:0] === 1'b1) ? throttle_threshold_2_fu_292_p1 : ap_phi_mux_throttle_threshold_phi_fu_166_p4);

assign tmp_4_fu_416_p2 = ((read_resp_stall_times_2_fu_410_p2 == throttle_cnt_1_fu_313_p3) ? 1'b1 : 1'b0);

assign tmp_7_fu_359_p2 = ((throttle_threshold_3_fu_306_p3 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_8_fu_365_p2 = ((throttle_cnt_1_fu_313_p3 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_9_fu_377_p1 = read_resp_contiguous_times_V_fu_353_p2;

assign tmp_s_fu_381_p2 = ((tmp_9_fu_377_p1 == throttle_threshold_3_fu_306_p3) ? 1'b1 : 1'b0);

endmodule //pcie_read_throttle_unit
