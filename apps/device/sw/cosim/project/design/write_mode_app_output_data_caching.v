// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="write_mode_app_output_data_caching,hls_ip_2017_4_op,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.997000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=586,HLS_SYN_LUT=360}" *)

module write_mode_app_output_data_caching (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
ap_continue,
        ap_idle,
        ap_ready,
        app_output_data_V_data_V_dout,
        app_output_data_V_data_V_empty_n,
        app_output_data_V_data_V_read,
        app_output_data_V_len_dout,
        app_output_data_V_len_empty_n,
        app_output_data_V_len_read,
        app_output_data_V_eop_dout,
        app_output_data_V_eop_empty_n,
        app_output_data_V_eop_read,
        cached_app_output_data_V_data_V_din,
        cached_app_output_data_V_data_V_full_n,
        cached_app_output_data_V_data_V_write,
        cached_app_output_data_V_len_din,
        cached_app_output_data_V_len_full_n,
        cached_app_output_data_V_len_write,
        cached_app_output_data_V_eop_din,
        cached_app_output_data_V_eop_full_n,
        cached_app_output_data_V_eop_write,
        cached_device_dram_write_req_apply_V_num_din,
        cached_device_dram_write_req_apply_V_num_full_n,
        cached_device_dram_write_req_apply_V_num_write,
        cached_device_dram_write_req_apply_V_addr_din,
        cached_device_dram_write_req_apply_V_addr_full_n,
        cached_device_dram_write_req_apply_V_addr_write,
        reset_write_mode_app_output_data_caching_V_dout,
        reset_write_mode_app_output_data_caching_V_empty_n,
        reset_write_mode_app_output_data_caching_V_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output ap_ready; output ap_continue;
input  [511:0] app_output_data_V_data_V_dout;
input   app_output_data_V_data_V_empty_n;
output   app_output_data_V_data_V_read;
input  [15:0] app_output_data_V_len_dout;
input   app_output_data_V_len_empty_n;
output   app_output_data_V_len_read;
input   app_output_data_V_eop_dout;
input   app_output_data_V_eop_empty_n;
output   app_output_data_V_eop_read;
output  [511:0] cached_app_output_data_V_data_V_din;
input   cached_app_output_data_V_data_V_full_n;
output   cached_app_output_data_V_data_V_write;
output  [15:0] cached_app_output_data_V_len_din;
input   cached_app_output_data_V_len_full_n;
output   cached_app_output_data_V_len_write;
output   cached_app_output_data_V_eop_din;
input   cached_app_output_data_V_eop_full_n;
output   cached_app_output_data_V_eop_write;
output  [7:0] cached_device_dram_write_req_apply_V_num_din;
input   cached_device_dram_write_req_apply_V_num_full_n;
output   cached_device_dram_write_req_apply_V_num_write;
output  [63:0] cached_device_dram_write_req_apply_V_addr_din;
input   cached_device_dram_write_req_apply_V_addr_full_n;
output   cached_device_dram_write_req_apply_V_addr_write;
input   reset_write_mode_app_output_data_caching_V_dout;
input   reset_write_mode_app_output_data_caching_V_empty_n;
output   reset_write_mode_app_output_data_caching_V_read;

reg ap_idle;
reg reset_write_mode_app_output_data_caching_V_read;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    cached_app_output_data_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] reset_reg_226;
reg   [0:0] empty_n_3_reg_378;
reg   [0:0] empty_n_2_reg_382;
reg    cached_app_output_data_V_len_blk_n;
reg    cached_app_output_data_V_eop_blk_n;
reg    cached_device_dram_write_req_apply_V_num_blk_n;
reg   [0:0] brmerge_reg_406;
reg    cached_device_dram_write_req_apply_V_addr_blk_n;
reg   [0:0] reset_3_reg_248;
wire   [0:0] empty_n_3_fu_276_p1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    cached_app_output_data_V_len1_status;
reg    ap_predicate_op62_write_state3;
wire    cached_device_dram_write_req_apply_V_num1_status;
reg    ap_predicate_op63_write_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_phi_mux_reset_phi_fu_230_p4;
wire   [0:0] empty_n_2_fu_281_p1;
reg   [511:0] tmp_data_V_reg_386;
reg   [15:0] tmp_len_reg_391;
reg   [0:0] tmp_eop_reg_396;
wire   [7:0] cached_app_output_data_flits_fu_300_p2;
reg   [7:0] cached_app_output_data_flits_reg_401;
wire   [0:0] brmerge_fu_312_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_reset_1_phi_fu_241_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_reset_1_reg_238;
wire   [0:0] p_reset_1_fu_344_p2;
wire   [0:0] ap_phi_reg_pp0_iter0_reset_3_reg_248;
reg    app_output_data_V_len0_update;
wire   [0:0] grp_nbread_fu_192_p4_0;
reg    cached_app_output_data_V_len1_update;
reg    ap_block_pp0_stage0_01001;
reg    cached_device_dram_write_req_apply_V_num1_update;
reg   [31:0] reset_cnt_fu_178;
wire   [31:0] p_s_fu_351_p3;
reg   [7:0] tmp_num_fu_182;
wire   [0:0] brmerge_fu_312_p0;
wire   [0:0] tmp_6_fu_306_p2;
wire   [31:0] reset_cnt_1_fu_326_p2;
wire   [0:0] tmp_3_fu_332_p2;
wire   [0:0] not_s_fu_338_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_148;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((empty_n_3_fu_276_p1 == 1'd0) & (empty_n_2_fu_281_p1 == 1'd0) & (ap_phi_mux_reset_phi_fu_230_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((empty_n_2_fu_281_p1 == 1'd1) & (empty_n_3_fu_276_p1 == 1'd0) & (brmerge_fu_312_p2 == 1'd0) & (ap_phi_mux_reset_phi_fu_230_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((brmerge_fu_312_p2 == 1'd1) & (empty_n_2_fu_281_p1 == 1'd1) & (empty_n_3_fu_276_p1 == 1'd0) & (ap_phi_mux_reset_phi_fu_230_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reset_3_reg_248 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((empty_n_3_fu_276_p1 == 1'd1) | (ap_phi_mux_reset_phi_fu_230_p4 == 1'd1)))) begin
        reset_3_reg_248 <= p_reset_1_fu_344_p2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        reset_3_reg_248 <= ap_phi_reg_pp0_iter0_reset_3_reg_248;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((empty_n_3_fu_276_p1 == 1'd1) | (ap_phi_mux_reset_phi_fu_230_p4 == 1'd1)))) begin
        reset_cnt_fu_178 <= p_s_fu_351_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        reset_cnt_fu_178 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        reset_reg_226 <= reset_3_reg_248;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        reset_reg_226 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_n_2_fu_281_p1 == 1'd1) & (empty_n_3_fu_276_p1 == 1'd0) & (brmerge_fu_312_p2 == 1'd0) & (ap_phi_mux_reset_phi_fu_230_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_num_fu_182 <= cached_app_output_data_flits_fu_300_p2;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((empty_n_3_fu_276_p1 == 1'd1) | (ap_phi_mux_reset_phi_fu_230_p4 == 1'd1))) | ((brmerge_fu_312_p2 == 1'd1) & (empty_n_2_fu_281_p1 == 1'd1) & (empty_n_3_fu_276_p1 == 1'd0) & (ap_phi_mux_reset_phi_fu_230_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp_num_fu_182 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_n_2_fu_281_p1 == 1'd1) & (empty_n_3_fu_276_p1 == 1'd0) & (ap_phi_mux_reset_phi_fu_230_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        brmerge_reg_406 <= brmerge_fu_312_p2;
        cached_app_output_data_flits_reg_401 <= cached_app_output_data_flits_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_n_3_fu_276_p1 == 1'd0) & (ap_phi_mux_reset_phi_fu_230_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_n_2_reg_382 <= grp_nbread_fu_192_p4_0;
        tmp_data_V_reg_386 <= app_output_data_V_data_V_dout;
        tmp_eop_reg_396 <= app_output_data_V_eop_dout;
        tmp_len_reg_391 <= app_output_data_V_len_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_reset_phi_fu_230_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_n_3_reg_378 <= reset_write_mode_app_output_data_caching_V_empty_n;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_148)) begin
        if (((empty_n_3_fu_276_p1 == 1'd1) & (ap_phi_mux_reset_phi_fu_230_p4 == 1'd0))) begin
            ap_phi_mux_reset_1_phi_fu_241_p4 = reset_write_mode_app_output_data_caching_V_empty_n;
        end else if ((ap_phi_mux_reset_phi_fu_230_p4 == 1'd1)) begin
            ap_phi_mux_reset_1_phi_fu_241_p4 = ap_phi_mux_reset_phi_fu_230_p4;
        end else begin
            ap_phi_mux_reset_1_phi_fu_241_p4 = ap_phi_reg_pp0_iter0_reset_1_reg_238;
        end
    end else begin
        ap_phi_mux_reset_1_phi_fu_241_p4 = ap_phi_reg_pp0_iter0_reset_1_reg_238;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_reset_phi_fu_230_p4 = reset_3_reg_248;
    end else begin
        ap_phi_mux_reset_phi_fu_230_p4 = reset_reg_226;
    end
end

always @ (*) begin
    if ((((app_output_data_V_len_empty_n & app_output_data_V_eop_empty_n & app_output_data_V_data_V_empty_n) == 1'b1) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((empty_n_3_fu_276_p1 == 1'd1) | (ap_phi_mux_reset_phi_fu_230_p4 == 1'd1))) | ((empty_n_3_fu_276_p1 == 1'd0) & (ap_phi_mux_reset_phi_fu_230_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))))) begin
        app_output_data_V_len0_update = 1'b1;
    end else begin
        app_output_data_V_len0_update = 1'b0;
    end
end

always @ (*) begin
    if (((empty_n_2_reg_382 == 1'd1) & (empty_n_3_reg_378 == 1'd0) & (reset_reg_226 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cached_app_output_data_V_data_V_blk_n = cached_app_output_data_V_data_V_full_n;
    end else begin
        cached_app_output_data_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_n_2_reg_382 == 1'd1) & (empty_n_3_reg_378 == 1'd0) & (reset_reg_226 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cached_app_output_data_V_eop_blk_n = cached_app_output_data_V_eop_full_n;
    end else begin
        cached_app_output_data_V_eop_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op62_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cached_app_output_data_V_len1_update = 1'b1;
    end else begin
        cached_app_output_data_V_len1_update = 1'b0;
    end
end

always @ (*) begin
    if (((empty_n_2_reg_382 == 1'd1) & (empty_n_3_reg_378 == 1'd0) & (reset_reg_226 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cached_app_output_data_V_len_blk_n = cached_app_output_data_V_len_full_n;
    end else begin
        cached_app_output_data_V_len_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((brmerge_reg_406 == 1'd1) & (empty_n_2_reg_382 == 1'd1) & (empty_n_3_reg_378 == 1'd0) & (reset_reg_226 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cached_device_dram_write_req_apply_V_addr_blk_n = cached_device_dram_write_req_apply_V_addr_full_n;
    end else begin
        cached_device_dram_write_req_apply_V_addr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op63_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cached_device_dram_write_req_apply_V_num1_update = 1'b1;
    end else begin
        cached_device_dram_write_req_apply_V_num1_update = 1'b0;
    end
end

always @ (*) begin
    if (((brmerge_reg_406 == 1'd1) & (empty_n_2_reg_382 == 1'd1) & (empty_n_3_reg_378 == 1'd0) & (reset_reg_226 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cached_device_dram_write_req_apply_V_num_blk_n = cached_device_dram_write_req_apply_V_num_full_n;
    end else begin
        cached_device_dram_write_req_apply_V_num_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_phi_mux_reset_phi_fu_230_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (reset_write_mode_app_output_data_caching_V_empty_n == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        reset_write_mode_app_output_data_caching_V_read = 1'b1;
    end else begin
        reset_write_mode_app_output_data_caching_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((cached_app_output_data_V_len1_status == 1'b0) & (ap_predicate_op62_write_state3 == 1'b1)) | ((cached_device_dram_write_req_apply_V_num1_status == 1'b0) & (ap_predicate_op63_write_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((cached_app_output_data_V_len1_status == 1'b0) & (ap_predicate_op62_write_state3 == 1'b1)) | ((cached_device_dram_write_req_apply_V_num1_status == 1'b0) & (ap_predicate_op63_write_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((cached_app_output_data_V_len1_status == 1'b0) & (ap_predicate_op62_write_state3 == 1'b1)) | ((cached_device_dram_write_req_apply_V_num1_status == 1'b0) & (ap_predicate_op63_write_state3 == 1'b1))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((cached_app_output_data_V_len1_status == 1'b0) & (ap_predicate_op62_write_state3 == 1'b1)) | ((cached_device_dram_write_req_apply_V_num1_status == 1'b0) & (ap_predicate_op63_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_condition_148 = ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_done = 1'b0;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_reset_1_reg_238 = 'bx;

assign ap_phi_reg_pp0_iter0_reset_3_reg_248 = 'bx;

always @ (*) begin
    ap_predicate_op62_write_state3 = ((empty_n_2_reg_382 == 1'd1) & (empty_n_3_reg_378 == 1'd0) & (reset_reg_226 == 1'd0));
end

always @ (*) begin
    ap_predicate_op63_write_state3 = ((brmerge_reg_406 == 1'd1) & (empty_n_2_reg_382 == 1'd1) & (empty_n_3_reg_378 == 1'd0) & (reset_reg_226 == 1'd0));
end

assign ap_ready = 1'b0;

assign app_output_data_V_data_V_read = app_output_data_V_len0_update;

assign app_output_data_V_eop_read = app_output_data_V_len0_update;

assign app_output_data_V_len_read = app_output_data_V_len0_update;

assign brmerge_fu_312_p0 = app_output_data_V_eop_dout;

assign brmerge_fu_312_p2 = (tmp_6_fu_306_p2 | brmerge_fu_312_p0);

assign cached_app_output_data_V_data_V_din = tmp_data_V_reg_386;

assign cached_app_output_data_V_data_V_write = cached_app_output_data_V_len1_update;

assign cached_app_output_data_V_eop_din = tmp_eop_reg_396;

assign cached_app_output_data_V_eop_write = cached_app_output_data_V_len1_update;

assign cached_app_output_data_V_len1_status = (cached_app_output_data_V_len_full_n & cached_app_output_data_V_eop_full_n & cached_app_output_data_V_data_V_full_n);

assign cached_app_output_data_V_len_din = tmp_len_reg_391;

assign cached_app_output_data_V_len_write = cached_app_output_data_V_len1_update;

assign cached_app_output_data_flits_fu_300_p2 = (tmp_num_fu_182 + 8'd1);

assign cached_device_dram_write_req_apply_V_addr_din = 64'd0;

assign cached_device_dram_write_req_apply_V_addr_write = cached_device_dram_write_req_apply_V_num1_update;

assign cached_device_dram_write_req_apply_V_num1_status = (cached_device_dram_write_req_apply_V_num_full_n & cached_device_dram_write_req_apply_V_addr_full_n);

assign cached_device_dram_write_req_apply_V_num_din = cached_app_output_data_flits_reg_401;

assign cached_device_dram_write_req_apply_V_num_write = cached_device_dram_write_req_apply_V_num1_update;

assign empty_n_2_fu_281_p1 = grp_nbread_fu_192_p4_0;

assign empty_n_3_fu_276_p1 = reset_write_mode_app_output_data_caching_V_empty_n;

assign grp_nbread_fu_192_p4_0 = (app_output_data_V_len_empty_n & app_output_data_V_eop_empty_n & app_output_data_V_data_V_empty_n);

assign not_s_fu_338_p2 = (tmp_3_fu_332_p2 ^ 1'd1);

assign p_reset_1_fu_344_p2 = (not_s_fu_338_p2 & ap_phi_mux_reset_1_phi_fu_241_p4);

assign p_s_fu_351_p3 = ((tmp_3_fu_332_p2[0:0] === 1'b1) ? 32'd0 : reset_cnt_1_fu_326_p2);

assign reset_cnt_1_fu_326_p2 = (reset_cnt_fu_178 + 32'd1);

assign tmp_3_fu_332_p2 = ((reset_cnt_1_fu_326_p2 == 32'd2048) ? 1'b1 : 1'b0);

assign tmp_6_fu_306_p2 = ((cached_app_output_data_flits_fu_300_p2 == 8'd64) ? 1'b1 : 1'b0);

endmodule //write_mode_app_output_data_caching
