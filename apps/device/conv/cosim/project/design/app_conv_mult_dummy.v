// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="app_conv_mult_dummy,hls_ip_2017_4_op,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.997000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=35,HLS_SYN_LUT=172}" *)

module app_conv_mult_dummy (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
ap_continue,
        ap_idle,
        ap_ready,
        reset_app_conv_mult_dummy_V_dout,
        reset_app_conv_mult_dummy_V_empty_n,
        reset_app_conv_mult_dummy_V_read,
        app_conv_mult_dummy_param_V_idx_blk_dout,
        app_conv_mult_dummy_param_V_idx_blk_empty_n,
        app_conv_mult_dummy_param_V_idx_blk_read,
        app_conv_mult_dummy_param_V_idx_dim_0_dout,
        app_conv_mult_dummy_param_V_idx_dim_0_empty_n,
        app_conv_mult_dummy_param_V_idx_dim_0_read,
        app_conv_mult_dummy_param_V_idx_dim_1_dout,
        app_conv_mult_dummy_param_V_idx_dim_1_empty_n,
        app_conv_mult_dummy_param_V_idx_dim_1_read,
        app_conv_mult_dummy_param_V_val_dout,
        app_conv_mult_dummy_param_V_val_empty_n,
        app_conv_mult_dummy_param_V_val_read,
        app_conv_mult_dummy_input_data_V_data_V_dout,
        app_conv_mult_dummy_input_data_V_data_V_empty_n,
        app_conv_mult_dummy_input_data_V_data_V_read,
        app_conv_mult_dummy_input_data_V_eop_dout,
        app_conv_mult_dummy_input_data_V_eop_empty_n,
        app_conv_mult_dummy_input_data_V_eop_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output ap_ready; output ap_continue;
input   reset_app_conv_mult_dummy_V_dout;
input   reset_app_conv_mult_dummy_V_empty_n;
output   reset_app_conv_mult_dummy_V_read;
input  [7:0] app_conv_mult_dummy_param_V_idx_blk_dout;
input   app_conv_mult_dummy_param_V_idx_blk_empty_n;
output   app_conv_mult_dummy_param_V_idx_blk_read;
input  [7:0] app_conv_mult_dummy_param_V_idx_dim_0_dout;
input   app_conv_mult_dummy_param_V_idx_dim_0_empty_n;
output   app_conv_mult_dummy_param_V_idx_dim_0_read;
input  [7:0] app_conv_mult_dummy_param_V_idx_dim_1_dout;
input   app_conv_mult_dummy_param_V_idx_dim_1_empty_n;
output   app_conv_mult_dummy_param_V_idx_dim_1_read;
input  [7:0] app_conv_mult_dummy_param_V_val_dout;
input   app_conv_mult_dummy_param_V_val_empty_n;
output   app_conv_mult_dummy_param_V_val_read;
input  [511:0] app_conv_mult_dummy_input_data_V_data_V_dout;
input   app_conv_mult_dummy_input_data_V_data_V_empty_n;
output   app_conv_mult_dummy_input_data_V_data_V_read;
input   app_conv_mult_dummy_input_data_V_eop_dout;
input   app_conv_mult_dummy_input_data_V_eop_empty_n;
output   app_conv_mult_dummy_input_data_V_eop_read;

reg ap_idle;
reg reset_app_conv_mult_dummy_V_read;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] ap_phi_mux_reset_phi_fu_174_p4;
reg   [0:0] reset_reg_170;
reg   [0:0] ap_phi_mux_reset_be_phi_fu_195_p4;
wire    ap_CS_fsm_state2;
reg   [0:0] ap_phi_mux_reset_1_phi_fu_184_p4;
wire   [0:0] empty_n_fu_208_p1;
wire   [0:0] p_reset_1_fu_234_p2;
reg    app_conv_mult_dummy_input_data_V_eop0_update;
reg    app_conv_mult_dummy_param_V_val0_update;
reg    ap_condition_95;
reg   [31:0] reset_cnt_fu_140;
wire   [31:0] p_s_fu_241_p3;
wire   [31:0] reset_cnt_1_fu_216_p2;
wire   [0:0] tmp_4_fu_222_p2;
wire   [0:0] not_s_fu_228_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((empty_n_fu_208_p1 == 1'd1) | (ap_phi_mux_reset_phi_fu_174_p4 == 1'd1)))) begin
        reset_cnt_fu_140 <= p_s_fu_241_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        reset_cnt_fu_140 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        reset_reg_170 <= ap_phi_mux_reset_be_phi_fu_195_p4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        reset_reg_170 <= 1'd0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((empty_n_fu_208_p1 == 1'd1) & (ap_phi_mux_reset_phi_fu_174_p4 == 1'd0))) begin
            ap_phi_mux_reset_1_phi_fu_184_p4 = reset_app_conv_mult_dummy_V_empty_n;
        end else if ((ap_phi_mux_reset_phi_fu_174_p4 == 1'd1)) begin
            ap_phi_mux_reset_1_phi_fu_184_p4 = reset_reg_170;
        end else begin
            ap_phi_mux_reset_1_phi_fu_184_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_reset_1_phi_fu_184_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((empty_n_fu_208_p1 == 1'd0) & (ap_phi_mux_reset_phi_fu_174_p4 == 1'd0))) begin
            ap_phi_mux_reset_be_phi_fu_195_p4 = 1'd0;
        end else if (((empty_n_fu_208_p1 == 1'd1) | (ap_phi_mux_reset_phi_fu_174_p4 == 1'd1))) begin
            ap_phi_mux_reset_be_phi_fu_195_p4 = p_reset_1_fu_234_p2;
        end else begin
            ap_phi_mux_reset_be_phi_fu_195_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_reset_be_phi_fu_195_p4 = 'bx;
    end
end

always @ (*) begin
    if ((((app_conv_mult_dummy_input_data_V_eop_empty_n & app_conv_mult_dummy_input_data_V_data_V_empty_n) == 1'b1) & (((1'b1 == ap_CS_fsm_state2) & ((empty_n_fu_208_p1 == 1'd1) | (ap_phi_mux_reset_phi_fu_174_p4 == 1'd1))) | ((empty_n_fu_208_p1 == 1'd0) & (ap_phi_mux_reset_phi_fu_174_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state2))))) begin
        app_conv_mult_dummy_input_data_V_eop0_update = 1'b1;
    end else begin
        app_conv_mult_dummy_input_data_V_eop0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_condition_95) & (((1'b1 == ap_CS_fsm_state2) & ((empty_n_fu_208_p1 == 1'd1) | (ap_phi_mux_reset_phi_fu_174_p4 == 1'd1))) | ((empty_n_fu_208_p1 == 1'd0) & (ap_phi_mux_reset_phi_fu_174_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state2))))) begin
        app_conv_mult_dummy_param_V_val0_update = 1'b1;
    end else begin
        app_conv_mult_dummy_param_V_val0_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_phi_mux_reset_phi_fu_174_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (reset_app_conv_mult_dummy_V_empty_n == 1'b1))) begin
        reset_app_conv_mult_dummy_V_read = 1'b1;
    end else begin
        reset_app_conv_mult_dummy_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_condition_95 = ((app_conv_mult_dummy_param_V_val_empty_n & app_conv_mult_dummy_param_V_idx_dim_1_empty_n & app_conv_mult_dummy_param_V_idx_dim_0_empty_n & app_conv_mult_dummy_param_V_idx_blk_empty_n) == 1'b1);
end

assign ap_done = 1'b0;

assign ap_phi_mux_reset_phi_fu_174_p4 = reset_reg_170;

assign ap_ready = 1'b0;

assign app_conv_mult_dummy_input_data_V_data_V_read = app_conv_mult_dummy_input_data_V_eop0_update;

assign app_conv_mult_dummy_input_data_V_eop_read = app_conv_mult_dummy_input_data_V_eop0_update;

assign app_conv_mult_dummy_param_V_idx_blk_read = app_conv_mult_dummy_param_V_val0_update;

assign app_conv_mult_dummy_param_V_idx_dim_0_read = app_conv_mult_dummy_param_V_val0_update;

assign app_conv_mult_dummy_param_V_idx_dim_1_read = app_conv_mult_dummy_param_V_val0_update;

assign app_conv_mult_dummy_param_V_val_read = app_conv_mult_dummy_param_V_val0_update;

assign empty_n_fu_208_p1 = reset_app_conv_mult_dummy_V_empty_n;

assign not_s_fu_228_p2 = (tmp_4_fu_222_p2 ^ 1'd1);

assign p_reset_1_fu_234_p2 = (not_s_fu_228_p2 & ap_phi_mux_reset_1_phi_fu_184_p4);

assign p_s_fu_241_p3 = ((tmp_4_fu_222_p2[0:0] === 1'b1) ? 32'd0 : reset_cnt_1_fu_216_p2);

assign reset_cnt_1_fu_216_p2 = (reset_cnt_fu_140 + 32'd1);

assign tmp_4_fu_222_p2 = ((reset_cnt_1_fu_216_p2 == 32'd2048) ? 1'b1 : 1'b0);

endmodule //app_conv_mult_dummy
