// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dram_read_req_multiplexer,hls_ip_2017_4_op,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.780250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=161,HLS_SYN_LUT=221}" *)

module dram_read_req_multiplexer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
ap_continue,
        ap_idle,
        ap_ready,
        host_dram_read_req_V_num_dout,
        host_dram_read_req_V_num_empty_n,
        host_dram_read_req_V_num_read,
        host_dram_read_req_V_addr_dout,
        host_dram_read_req_V_addr_empty_n,
        host_dram_read_req_V_addr_read,
        device_dram_read_req_V_num_dout,
        device_dram_read_req_V_num_empty_n,
        device_dram_read_req_V_num_read,
        device_dram_read_req_V_addr_dout,
        device_dram_read_req_V_addr_empty_n,
        device_dram_read_req_V_addr_read,
        unified_dram_read_req_V_num_din,
        unified_dram_read_req_V_num_full_n,
        unified_dram_read_req_V_num_write,
        unified_dram_read_req_V_addr_din,
        unified_dram_read_req_V_addr_full_n,
        unified_dram_read_req_V_addr_write,
        release_device_dram_resp_buf_flits_V_dout,
        release_device_dram_resp_buf_flits_V_empty_n,
        release_device_dram_resp_buf_flits_V_read,
        dram_read_context_write_V_din,
        dram_read_context_write_V_full_n,
        dram_read_context_write_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output ap_ready; output ap_continue;
input  [7:0] host_dram_read_req_V_num_dout;
input   host_dram_read_req_V_num_empty_n;
output   host_dram_read_req_V_num_read;
input  [63:0] host_dram_read_req_V_addr_dout;
input   host_dram_read_req_V_addr_empty_n;
output   host_dram_read_req_V_addr_read;
input  [7:0] device_dram_read_req_V_num_dout;
input   device_dram_read_req_V_num_empty_n;
output   device_dram_read_req_V_num_read;
input  [63:0] device_dram_read_req_V_addr_dout;
input   device_dram_read_req_V_addr_empty_n;
output   device_dram_read_req_V_addr_read;
output  [7:0] unified_dram_read_req_V_num_din;
input   unified_dram_read_req_V_num_full_n;
output   unified_dram_read_req_V_num_write;
output  [63:0] unified_dram_read_req_V_addr_din;
input   unified_dram_read_req_V_addr_full_n;
output   unified_dram_read_req_V_addr_write;
input   release_device_dram_resp_buf_flits_V_dout;
input   release_device_dram_resp_buf_flits_V_empty_n;
output   release_device_dram_resp_buf_flits_V_read;
output   dram_read_context_write_V_din;
input   dram_read_context_write_V_full_n;
output   dram_read_context_write_V_write;

reg ap_idle;
reg[7:0] unified_dram_read_req_V_num_din;
reg[63:0] unified_dram_read_req_V_addr_din;
reg release_device_dram_resp_buf_flits_V_read;
reg dram_read_context_write_V_din;
reg dram_read_context_write_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    unified_dram_read_req_V_num_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] empty_n_3_reg_299;
reg   [0:0] icmp_reg_313;
reg   [0:0] empty_n_4_reg_317;
reg    unified_dram_read_req_V_addr_blk_n;
reg    dram_read_context_write_V_blk_n;
reg   [0:0] release_device_dram_resp_buf_flits_V_read_reg_294_0;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op51_write_state4;
wire    unified_dram_read_req_V_num1_status;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] empty_n_3_fu_235_p1;
reg   [7:0] tmp_num_reg_303;
reg   [63:0] tmp_addr_reg_308;
wire   [0:0] icmp_fu_257_p2;
wire   [0:0] empty_n_4_fu_263_p1;
reg   [7:0] tmp_num_2_reg_321;
reg   [63:0] tmp_addr_2_reg_326;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    host_dram_read_req_V_num0_update;
wire   [0:0] empty_n_1_nbread_fu_174_p3_0;
reg    device_dram_read_req_V_num0_update;
wire   [0:0] empty_n_2_nbread_fu_182_p3_0;
reg    ap_block_pp0_stage0_01001;
reg    unified_dram_read_req_V_num1_update;
reg   [7:0] available_device_dram_resp_buf_flits_fu_164;
wire   [7:0] available_device_dram_resp_buf_flits_1_fu_228_p2;
wire   [7:0] available_device_dram_resp_buf_flits_2_fu_275_p2;
wire   [7:0] tmp_1_fu_224_p1;
wire   [1:0] tmp_fu_247_p4;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_fu_257_p2 == 1'd0) & (empty_n_3_fu_235_p1 == 1'd0) & (empty_n_4_fu_263_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        available_device_dram_resp_buf_flits_fu_164 <= available_device_dram_resp_buf_flits_2_fu_275_p2;
    end else if ((((empty_n_3_fu_235_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((empty_n_3_fu_235_p1 == 1'd0) & (icmp_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((empty_n_4_fu_263_p1 == 1'd0) & (icmp_fu_257_p2 == 1'd0) & (empty_n_3_fu_235_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        available_device_dram_resp_buf_flits_fu_164 <= available_device_dram_resp_buf_flits_1_fu_228_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        available_device_dram_resp_buf_flits_fu_164 <= 8'd128;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_n_3_reg_299 <= empty_n_1_nbread_fu_174_p3_0;
        release_device_dram_resp_buf_flits_V_read_reg_294_0 <= release_device_dram_resp_buf_flits_V_empty_n;
        tmp_addr_reg_308 <= host_dram_read_req_V_addr_dout;
        tmp_num_reg_303 <= host_dram_read_req_V_num_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_fu_257_p2 == 1'd0) & (empty_n_3_fu_235_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_n_4_reg_317 <= empty_n_2_nbread_fu_182_p3_0;
        tmp_addr_2_reg_326 <= device_dram_read_req_V_addr_dout;
        tmp_num_2_reg_321 <= device_dram_read_req_V_num_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_n_3_fu_235_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_reg_313 <= icmp_fu_257_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_fu_257_p2 == 1'd0) & (empty_n_3_fu_235_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((device_dram_read_req_V_num_empty_n & device_dram_read_req_V_addr_empty_n) == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        device_dram_read_req_V_num0_update = 1'b1;
    end else begin
        device_dram_read_req_V_num0_update = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_reg_313 == 1'd0) & (empty_n_4_reg_317 == 1'd1) & (empty_n_3_reg_299 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((empty_n_3_reg_299 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        dram_read_context_write_V_blk_n = dram_read_context_write_V_full_n;
    end else begin
        dram_read_context_write_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((empty_n_3_reg_299 == 1'd1)) begin
            dram_read_context_write_V_din = 1'd0;
        end else if ((ap_predicate_op51_write_state4 == 1'b1)) begin
            dram_read_context_write_V_din = 1'd1;
        end else begin
            dram_read_context_write_V_din = 'bx;
        end
    end else begin
        dram_read_context_write_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op51_write_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((empty_n_3_reg_299 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        dram_read_context_write_V_write = 1'b1;
    end else begin
        dram_read_context_write_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ((host_dram_read_req_V_num_empty_n & host_dram_read_req_V_addr_empty_n) == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        host_dram_read_req_V_num0_update = 1'b1;
    end else begin
        host_dram_read_req_V_num0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (release_device_dram_resp_buf_flits_V_empty_n == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        release_device_dram_resp_buf_flits_V_read = 1'b1;
    end else begin
        release_device_dram_resp_buf_flits_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_reg_313 == 1'd0) & (empty_n_4_reg_317 == 1'd1) & (empty_n_3_reg_299 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((empty_n_3_reg_299 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        unified_dram_read_req_V_addr_blk_n = unified_dram_read_req_V_addr_full_n;
    end else begin
        unified_dram_read_req_V_addr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((empty_n_3_reg_299 == 1'd1)) begin
            unified_dram_read_req_V_addr_din = tmp_addr_reg_308;
        end else if ((ap_predicate_op51_write_state4 == 1'b1)) begin
            unified_dram_read_req_V_addr_din = tmp_addr_2_reg_326;
        end else begin
            unified_dram_read_req_V_addr_din = 'bx;
        end
    end else begin
        unified_dram_read_req_V_addr_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op51_write_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((empty_n_3_reg_299 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        unified_dram_read_req_V_num1_update = 1'b1;
    end else begin
        unified_dram_read_req_V_num1_update = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_reg_313 == 1'd0) & (empty_n_4_reg_317 == 1'd1) & (empty_n_3_reg_299 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((empty_n_3_reg_299 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        unified_dram_read_req_V_num_blk_n = unified_dram_read_req_V_num_full_n;
    end else begin
        unified_dram_read_req_V_num_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((empty_n_3_reg_299 == 1'd1)) begin
            unified_dram_read_req_V_num_din = tmp_num_reg_303;
        end else if ((ap_predicate_op51_write_state4 == 1'b1)) begin
            unified_dram_read_req_V_num_din = tmp_num_2_reg_321;
        end else begin
            unified_dram_read_req_V_num_din = 'bx;
        end
    end else begin
        unified_dram_read_req_V_num_din = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((unified_dram_read_req_V_num1_status == 1'b0) & (ap_predicate_op51_write_state4 == 1'b1)) | ((dram_read_context_write_V_full_n == 1'b0) & (ap_predicate_op51_write_state4 == 1'b1)) | ((empty_n_3_reg_299 == 1'd1) & (unified_dram_read_req_V_num1_status == 1'b0)) | ((empty_n_3_reg_299 == 1'd1) & (dram_read_context_write_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((unified_dram_read_req_V_num1_status == 1'b0) & (ap_predicate_op51_write_state4 == 1'b1)) | ((dram_read_context_write_V_full_n == 1'b0) & (ap_predicate_op51_write_state4 == 1'b1)) | ((empty_n_3_reg_299 == 1'd1) & (unified_dram_read_req_V_num1_status == 1'b0)) | ((empty_n_3_reg_299 == 1'd1) & (dram_read_context_write_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((unified_dram_read_req_V_num1_status == 1'b0) & (ap_predicate_op51_write_state4 == 1'b1)) | ((dram_read_context_write_V_full_n == 1'b0) & (ap_predicate_op51_write_state4 == 1'b1)) | ((empty_n_3_reg_299 == 1'd1) & (unified_dram_read_req_V_num1_status == 1'b0)) | ((empty_n_3_reg_299 == 1'd1) & (dram_read_context_write_V_full_n == 1'b0))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = (((unified_dram_read_req_V_num1_status == 1'b0) & (ap_predicate_op51_write_state4 == 1'b1)) | ((dram_read_context_write_V_full_n == 1'b0) & (ap_predicate_op51_write_state4 == 1'b1)) | ((empty_n_3_reg_299 == 1'd1) & (unified_dram_read_req_V_num1_status == 1'b0)) | ((empty_n_3_reg_299 == 1'd1) & (dram_read_context_write_V_full_n == 1'b0)));
end

assign ap_done = 1'b0;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op51_write_state4 = ((icmp_reg_313 == 1'd0) & (empty_n_4_reg_317 == 1'd1) & (empty_n_3_reg_299 == 1'd0));
end

assign ap_ready = 1'b0;

assign available_device_dram_resp_buf_flits_1_fu_228_p2 = (available_device_dram_resp_buf_flits_fu_164 + tmp_1_fu_224_p1);

assign available_device_dram_resp_buf_flits_2_fu_275_p2 = (available_device_dram_resp_buf_flits_1_fu_228_p2 - device_dram_read_req_V_num_dout);

assign device_dram_read_req_V_addr_read = device_dram_read_req_V_num0_update;

assign device_dram_read_req_V_num_read = device_dram_read_req_V_num0_update;

assign empty_n_1_nbread_fu_174_p3_0 = (host_dram_read_req_V_num_empty_n & host_dram_read_req_V_addr_empty_n);

assign empty_n_2_nbread_fu_182_p3_0 = (device_dram_read_req_V_num_empty_n & device_dram_read_req_V_addr_empty_n);

assign empty_n_3_fu_235_p1 = empty_n_1_nbread_fu_174_p3_0;

assign empty_n_4_fu_263_p1 = empty_n_2_nbread_fu_182_p3_0;

assign host_dram_read_req_V_addr_read = host_dram_read_req_V_num0_update;

assign host_dram_read_req_V_num_read = host_dram_read_req_V_num0_update;

assign icmp_fu_257_p2 = ((tmp_fu_247_p4 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_1_fu_224_p1 = release_device_dram_resp_buf_flits_V_read_reg_294_0;

assign tmp_fu_247_p4 = {{available_device_dram_resp_buf_flits_1_fu_228_p2[7:6]}};

assign unified_dram_read_req_V_addr_write = unified_dram_read_req_V_num1_update;

assign unified_dram_read_req_V_num1_status = (unified_dram_read_req_V_num_full_n & unified_dram_read_req_V_addr_full_n);

assign unified_dram_read_req_V_num_write = unified_dram_read_req_V_num1_update;

endmodule //dram_read_req_multiplexer
