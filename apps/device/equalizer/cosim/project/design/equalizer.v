// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module equalizer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        image_height,
        app_input_data_V_data_V_dout,
        app_input_data_V_data_V_empty_n,
        app_input_data_V_data_V_read,
        app_input_data_V_len_dout,
        app_input_data_V_len_empty_n,
        app_input_data_V_len_read,
        app_input_data_V_eop_dout,
        app_input_data_V_eop_empty_n,
        app_input_data_V_eop_read,
        app_output_data_V_data_V_din,
        app_output_data_V_data_V_full_n,
        app_output_data_V_data_V_write,
        app_output_data_V_len_din,
        app_output_data_V_len_full_n,
        app_output_data_V_len_write,
        app_output_data_V_eop_din,
        app_output_data_V_eop_full_n,
        app_output_data_V_eop_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] image_height;
input  [511:0] app_input_data_V_data_V_dout;
input   app_input_data_V_data_V_empty_n;
output   app_input_data_V_data_V_read;
input  [15:0] app_input_data_V_len_dout;
input   app_input_data_V_len_empty_n;
output   app_input_data_V_len_read;
input   app_input_data_V_eop_dout;
input   app_input_data_V_eop_empty_n;
output   app_input_data_V_eop_read;
output  [511:0] app_output_data_V_data_V_din;
input   app_output_data_V_data_V_full_n;
output   app_output_data_V_data_V_write;
output  [15:0] app_output_data_V_len_din;
input   app_output_data_V_len_full_n;
output   app_output_data_V_len_write;
output   app_output_data_V_eop_din;
input   app_output_data_V_eop_full_n;
output   app_output_data_V_eop_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg app_input_data_V_data_V_read;
reg app_input_data_V_len_read;
reg app_input_data_V_eop_read;
reg app_output_data_V_data_V_write;
reg app_output_data_V_len_write;
reg app_output_data_V_eop_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [26:0] tmp_cast_reg_77;
wire    grp_dataflow_parent_loop_proc_fu_42_app_input_data_V_data_V_read;
wire    grp_dataflow_parent_loop_proc_fu_42_app_input_data_V_len_read;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_42_app_input_data_V_eop_dout;
wire    grp_dataflow_parent_loop_proc_fu_42_app_input_data_V_eop_read;
wire   [511:0] grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_data_V_din;
wire    grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_data_V_write;
wire   [15:0] grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_len_din;
wire    grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_len_write;
wire   [0:0] grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_eop_din;
wire    grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_eop_write;
wire    grp_dataflow_parent_loop_proc_fu_42_ap_done;
wire    grp_dataflow_parent_loop_proc_fu_42_ap_start;
wire    grp_dataflow_parent_loop_proc_fu_42_ap_ready;
wire    grp_dataflow_parent_loop_proc_fu_42_ap_idle;
reg    grp_dataflow_parent_loop_proc_fu_42_ap_continue;
reg    ap_reg_grp_dataflow_parent_loop_proc_fu_42_ap_start;
wire    ap_CS_fsm_state2;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_42_ap_ready;
reg    ap_sync_grp_dataflow_parent_loop_proc_fu_42_ap_ready;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_reg_grp_dataflow_parent_loop_proc_fu_42_ap_start = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc_fu_42_ap_ready = 1'b0;
end

dataflow_parent_loop_proc grp_dataflow_parent_loop_proc_fu_42(
    .tmp_cast(tmp_cast_reg_77),
    .app_input_data_V_data_V_dout(app_input_data_V_data_V_dout),
    .app_input_data_V_data_V_empty_n(app_input_data_V_data_V_empty_n),
    .app_input_data_V_data_V_read(grp_dataflow_parent_loop_proc_fu_42_app_input_data_V_data_V_read),
    .app_input_data_V_len_dout(app_input_data_V_len_dout),
    .app_input_data_V_len_empty_n(app_input_data_V_len_empty_n),
    .app_input_data_V_len_read(grp_dataflow_parent_loop_proc_fu_42_app_input_data_V_len_read),
    .app_input_data_V_eop_dout(grp_dataflow_parent_loop_proc_fu_42_app_input_data_V_eop_dout),
    .app_input_data_V_eop_empty_n(app_input_data_V_eop_empty_n),
    .app_input_data_V_eop_read(grp_dataflow_parent_loop_proc_fu_42_app_input_data_V_eop_read),
    .image_height(image_height),
    .app_output_data_V_data_V_din(grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_data_V_din),
    .app_output_data_V_data_V_full_n(app_output_data_V_data_V_full_n),
    .app_output_data_V_data_V_write(grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_data_V_write),
    .app_output_data_V_len_din(grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_len_din),
    .app_output_data_V_len_full_n(app_output_data_V_len_full_n),
    .app_output_data_V_len_write(grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_len_write),
    .app_output_data_V_eop_din(grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_eop_din),
    .app_output_data_V_eop_full_n(app_output_data_V_eop_full_n),
    .app_output_data_V_eop_write(grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_eop_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .image_height_ap_vld(1'b1),
    .ap_done(grp_dataflow_parent_loop_proc_fu_42_ap_done),
    .ap_start(grp_dataflow_parent_loop_proc_fu_42_ap_start),
    .ap_ready(grp_dataflow_parent_loop_proc_fu_42_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_proc_fu_42_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_proc_fu_42_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_dataflow_parent_loop_proc_fu_42_ap_start <= 1'b0;
    end else begin
        if ((((ap_sync_grp_dataflow_parent_loop_proc_fu_42_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_reg_grp_dataflow_parent_loop_proc_fu_42_ap_start <= 1'b1;
        end else if ((grp_dataflow_parent_loop_proc_fu_42_ap_ready == 1'b1)) begin
            ap_reg_grp_dataflow_parent_loop_proc_fu_42_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc_fu_42_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((grp_dataflow_parent_loop_proc_fu_42_ap_done == 1'b1)) begin
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_42_ap_ready <= 1'b0;
            end else if ((grp_dataflow_parent_loop_proc_fu_42_ap_ready == 1'b1)) begin
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_42_ap_ready <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_cast_reg_77 <= {{image_height[31:5]}};
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_dataflow_parent_loop_proc_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dataflow_parent_loop_proc_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_sync_reg_grp_dataflow_parent_loop_proc_fu_42_ap_ready == 1'b0)) begin
        ap_sync_grp_dataflow_parent_loop_proc_fu_42_ap_ready = grp_dataflow_parent_loop_proc_fu_42_ap_ready;
    end else begin
        ap_sync_grp_dataflow_parent_loop_proc_fu_42_ap_ready = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        app_input_data_V_data_V_read = grp_dataflow_parent_loop_proc_fu_42_app_input_data_V_data_V_read;
    end else begin
        app_input_data_V_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        app_input_data_V_eop_read = grp_dataflow_parent_loop_proc_fu_42_app_input_data_V_eop_read;
    end else begin
        app_input_data_V_eop_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        app_input_data_V_len_read = grp_dataflow_parent_loop_proc_fu_42_app_input_data_V_len_read;
    end else begin
        app_input_data_V_len_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        app_output_data_V_data_V_write = grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_data_V_write;
    end else begin
        app_output_data_V_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        app_output_data_V_eop_write = grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_eop_write;
    end else begin
        app_output_data_V_eop_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        app_output_data_V_len_write = grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_len_write;
    end else begin
        app_output_data_V_len_write = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dataflow_parent_loop_proc_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_dataflow_parent_loop_proc_fu_42_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_proc_fu_42_ap_continue = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_dataflow_parent_loop_proc_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign app_output_data_V_data_V_din = grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_data_V_din;

assign app_output_data_V_eop_din = grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_eop_din;

assign app_output_data_V_len_din = grp_dataflow_parent_loop_proc_fu_42_app_output_data_V_len_din;

assign grp_dataflow_parent_loop_proc_fu_42_ap_start = ap_reg_grp_dataflow_parent_loop_proc_fu_42_ap_start;

assign grp_dataflow_parent_loop_proc_fu_42_app_input_data_V_eop_dout = app_input_data_V_eop_dout;

endmodule //equalizer
