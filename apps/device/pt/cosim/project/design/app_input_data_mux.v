// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="app_input_data_mux,hls_ip_2017_4_op,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.208000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1166,HLS_SYN_LUT=522}" *)

module app_input_data_mux (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
ap_continue,
        ap_idle,
        ap_ready,
        read_mode_app_input_data_V_data_V_dout,
        read_mode_app_input_data_V_data_V_empty_n,
        read_mode_app_input_data_V_data_V_read,
        read_mode_app_input_data_V_len_dout,
        read_mode_app_input_data_V_len_empty_n,
        read_mode_app_input_data_V_len_read,
        read_mode_app_input_data_V_eop_dout,
        read_mode_app_input_data_V_eop_empty_n,
        read_mode_app_input_data_V_eop_read,
        write_mode_app_input_data_V_data_V_dout,
        write_mode_app_input_data_V_data_V_empty_n,
        write_mode_app_input_data_V_data_V_read,
        write_mode_app_input_data_V_len_dout,
        write_mode_app_input_data_V_len_empty_n,
        write_mode_app_input_data_V_len_read,
        write_mode_app_input_data_V_eop_dout,
        write_mode_app_input_data_V_eop_empty_n,
        write_mode_app_input_data_V_eop_read,
        app_input_data_V_data_V_din,
        app_input_data_V_data_V_full_n,
        app_input_data_V_data_V_write,
        app_input_data_V_len_din,
        app_input_data_V_len_full_n,
        app_input_data_V_len_write,
        app_input_data_V_eop_din,
        app_input_data_V_eop_full_n,
        app_input_data_V_eop_write,
        peek_virt_written_bytes_req_V_dout,
        peek_virt_written_bytes_req_V_empty_n,
        peek_virt_written_bytes_req_V_read,
        peek_virt_written_bytes_resp_V_din,
        peek_virt_written_bytes_resp_V_full_n,
        peek_virt_written_bytes_resp_V_write,
        reset_app_input_data_mux_V_dout,
        reset_app_input_data_mux_V_empty_n,
        reset_app_input_data_mux_V_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output ap_ready; output ap_continue;
input  [511:0] read_mode_app_input_data_V_data_V_dout;
input   read_mode_app_input_data_V_data_V_empty_n;
output   read_mode_app_input_data_V_data_V_read;
input  [15:0] read_mode_app_input_data_V_len_dout;
input   read_mode_app_input_data_V_len_empty_n;
output   read_mode_app_input_data_V_len_read;
input   read_mode_app_input_data_V_eop_dout;
input   read_mode_app_input_data_V_eop_empty_n;
output   read_mode_app_input_data_V_eop_read;
input  [511:0] write_mode_app_input_data_V_data_V_dout;
input   write_mode_app_input_data_V_data_V_empty_n;
output   write_mode_app_input_data_V_data_V_read;
input  [15:0] write_mode_app_input_data_V_len_dout;
input   write_mode_app_input_data_V_len_empty_n;
output   write_mode_app_input_data_V_len_read;
input   write_mode_app_input_data_V_eop_dout;
input   write_mode_app_input_data_V_eop_empty_n;
output   write_mode_app_input_data_V_eop_read;
output  [511:0] app_input_data_V_data_V_din;
input   app_input_data_V_data_V_full_n;
output   app_input_data_V_data_V_write;
output  [15:0] app_input_data_V_len_din;
input   app_input_data_V_len_full_n;
output   app_input_data_V_len_write;
output   app_input_data_V_eop_din;
input   app_input_data_V_eop_full_n;
output   app_input_data_V_eop_write;
input  [31:0] peek_virt_written_bytes_req_V_dout;
input   peek_virt_written_bytes_req_V_empty_n;
output   peek_virt_written_bytes_req_V_read;
output  [31:0] peek_virt_written_bytes_resp_V_din;
input   peek_virt_written_bytes_resp_V_full_n;
output   peek_virt_written_bytes_resp_V_write;
input   reset_app_input_data_mux_V_dout;
input   reset_app_input_data_mux_V_empty_n;
output   reset_app_input_data_mux_V_read;

reg ap_idle;
reg[511:0] app_input_data_V_data_V_din;
reg[15:0] app_input_data_V_len_din;
reg app_input_data_V_eop_din;
reg peek_virt_written_bytes_req_V_read;
reg[31:0] peek_virt_written_bytes_resp_V_din;
reg peek_virt_written_bytes_resp_V_write;
reg reset_app_input_data_mux_V_read;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    app_input_data_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] reset_reg_282;
reg   [0:0] empty_n_7_reg_508;
reg   [0:0] empty_n_4_reg_513;
reg   [0:0] empty_n_5_reg_532;
reg    app_input_data_V_len_blk_n;
reg    app_input_data_V_eop_blk_n;
reg    peek_virt_written_bytes_resp_V_blk_n;
reg   [0:0] empty_n_6_reg_552;
reg   [0:0] peek_first_half_load_1_reg_556;
reg   [63:0] virt_written_bytes_reg_294;
wire   [0:0] empty_n_7_fu_369_p1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    app_input_data_V_len1_status;
reg    ap_predicate_op64_write_state3;
reg    ap_predicate_op68_write_state3;
reg    ap_predicate_op74_write_state3;
reg    ap_predicate_op77_write_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_phi_mux_reset_phi_fu_286_p4;
wire   [0:0] empty_n_4_fu_373_p1;
reg   [511:0] tmp_data_V_reg_517;
reg   [15:0] tmp_len_reg_522;
reg   [0:0] tmp_eop_reg_527;
reg   [511:0] tmp_data_V_1_reg_536;
reg   [15:0] tmp_len_1_reg_541;
reg   [0:0] tmp_eop_1_reg_547;
wire   [0:0] empty_n_6_fu_405_p1;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_reset_3_phi_fu_332_p6;
reg   [63:0] ap_phi_mux_virt_written_bytes_3_phi_fu_347_p6;
reg   [63:0] ap_phi_mux_virt_written_bytes_2_phi_fu_308_p6;
wire   [63:0] ap_phi_reg_pp0_iter1_virt_written_bytes_2_reg_305;
wire   [63:0] virt_written_bytes_1_fu_429_p2;
wire   [0:0] ap_phi_reg_pp0_iter0_reset_1_reg_318;
reg   [0:0] ap_phi_reg_pp0_iter1_reset_1_reg_318;
wire   [0:0] p_reset_1_fu_473_p2;
wire   [0:0] ap_phi_reg_pp0_iter1_reset_3_reg_328;
wire   [63:0] ap_phi_reg_pp0_iter1_virt_written_bytes_3_reg_343;
reg    read_mode_app_input_data_V_len0_update;
wire   [0:0] grp_nbread_fu_236_p4_0;
reg    write_mode_app_input_data_V_len0_update;
wire   [0:0] grp_nbread_fu_246_p4_0;
reg    app_input_data_V_len1_update;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_1_fu_436_p1;
reg   [31:0] reset_cnt_fu_222;
wire   [31:0] p_s_fu_480_p3;
reg   [0:0] peek_first_half_fu_226;
wire   [0:0] peek_first_half_1_fu_415_p2;
wire   [63:0] tmp_s_fu_426_p1;
wire   [31:0] reset_cnt_1_fu_455_p2;
wire   [0:0] tmp_5_fu_461_p2;
wire   [0:0] not_s_fu_467_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_210;
reg    ap_condition_278;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_210)) begin
        if (((empty_n_7_fu_369_p1 == 1'd1) & (ap_phi_mux_reset_phi_fu_286_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_reset_1_reg_318 <= reset_app_input_data_mux_V_empty_n;
        end else if ((ap_phi_mux_reset_phi_fu_286_p4 == 1'd1)) begin
            ap_phi_reg_pp0_iter1_reset_1_reg_318 <= ap_phi_mux_reset_phi_fu_286_p4;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_reset_1_reg_318 <= ap_phi_reg_pp0_iter0_reset_1_reg_318;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((empty_n_6_fu_405_p1 == 1'd1) & (ap_phi_mux_reset_phi_fu_286_p4 == 1'd0) & (empty_n_7_fu_369_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        peek_first_half_fu_226 <= peek_first_half_1_fu_415_p2;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((ap_phi_mux_reset_phi_fu_286_p4 == 1'd1) | (empty_n_7_fu_369_p1 == 1'd1))) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        peek_first_half_fu_226 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & ((empty_n_7_reg_508 == 1'd1) | (reset_reg_282 == 1'd1)))) begin
        reset_cnt_fu_222 <= p_s_fu_480_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        reset_cnt_fu_222 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        reset_reg_282 <= ap_phi_mux_reset_3_phi_fu_332_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        reset_reg_282 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        virt_written_bytes_reg_294 <= ap_phi_mux_virt_written_bytes_3_phi_fu_347_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        virt_written_bytes_reg_294 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_reset_phi_fu_286_p4 == 1'd0) & (empty_n_7_fu_369_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_n_4_reg_513 <= grp_nbread_fu_236_p4_0;
        empty_n_6_reg_552 <= peek_virt_written_bytes_req_V_empty_n;
        tmp_data_V_reg_517 <= read_mode_app_input_data_V_data_V_dout;
        tmp_eop_reg_527 <= read_mode_app_input_data_V_eop_dout;
        tmp_len_reg_522 <= read_mode_app_input_data_V_len_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_n_4_fu_373_p1 == 1'd0) & (ap_phi_mux_reset_phi_fu_286_p4 == 1'd0) & (empty_n_7_fu_369_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_n_5_reg_532 <= grp_nbread_fu_246_p4_0;
        tmp_data_V_1_reg_536 <= write_mode_app_input_data_V_data_V_dout;
        tmp_eop_1_reg_547 <= write_mode_app_input_data_V_eop_dout;
        tmp_len_1_reg_541 <= write_mode_app_input_data_V_len_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_reset_phi_fu_286_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_n_7_reg_508 <= reset_app_input_data_mux_V_empty_n;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_n_6_fu_405_p1 == 1'd1) & (ap_phi_mux_reset_phi_fu_286_p4 == 1'd0) & (empty_n_7_fu_369_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        peek_first_half_load_1_reg_556 <= peek_first_half_fu_226;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((empty_n_7_reg_508 == 1'd0) & (empty_n_6_reg_552 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((empty_n_6_reg_552 == 1'd1) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_mux_reset_3_phi_fu_332_p6 = 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((empty_n_7_reg_508 == 1'd1) | (reset_reg_282 == 1'd1)))) begin
        ap_phi_mux_reset_3_phi_fu_332_p6 = p_reset_1_fu_473_p2;
    end else begin
        ap_phi_mux_reset_3_phi_fu_332_p6 = ap_phi_reg_pp0_iter1_reset_3_reg_328;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_reset_phi_fu_286_p4 = ap_phi_mux_reset_3_phi_fu_332_p6;
    end else begin
        ap_phi_mux_reset_phi_fu_286_p4 = reset_reg_282;
    end
end

always @ (*) begin
    if (((empty_n_5_reg_532 == 1'd1) & (empty_n_4_reg_513 == 1'd0) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_virt_written_bytes_2_phi_fu_308_p6 = virt_written_bytes_1_fu_429_p2;
    end else if ((((empty_n_5_reg_532 == 1'd0) & (empty_n_4_reg_513 == 1'd0) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((empty_n_4_reg_513 == 1'd1) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_mux_virt_written_bytes_2_phi_fu_308_p6 = virt_written_bytes_reg_294;
    end else begin
        ap_phi_mux_virt_written_bytes_2_phi_fu_308_p6 = ap_phi_reg_pp0_iter1_virt_written_bytes_2_reg_305;
    end
end

always @ (*) begin
    if ((((empty_n_7_reg_508 == 1'd0) & (empty_n_6_reg_552 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((empty_n_6_reg_552 == 1'd1) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_mux_virt_written_bytes_3_phi_fu_347_p6 = ap_phi_mux_virt_written_bytes_2_phi_fu_308_p6;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((empty_n_7_reg_508 == 1'd1) | (reset_reg_282 == 1'd1)))) begin
        ap_phi_mux_virt_written_bytes_3_phi_fu_347_p6 = 64'd0;
    end else begin
        ap_phi_mux_virt_written_bytes_3_phi_fu_347_p6 = ap_phi_reg_pp0_iter1_virt_written_bytes_3_reg_343;
    end
end

always @ (*) begin
    if ((((empty_n_5_reg_532 == 1'd1) & (empty_n_4_reg_513 == 1'd0) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((empty_n_4_reg_513 == 1'd1) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        app_input_data_V_data_V_blk_n = app_input_data_V_data_V_full_n;
    end else begin
        app_input_data_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_278)) begin
        if ((ap_predicate_op68_write_state3 == 1'b1)) begin
            app_input_data_V_data_V_din = tmp_data_V_reg_517;
        end else if ((ap_predicate_op64_write_state3 == 1'b1)) begin
            app_input_data_V_data_V_din = tmp_data_V_1_reg_536;
        end else begin
            app_input_data_V_data_V_din = 'bx;
        end
    end else begin
        app_input_data_V_data_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((empty_n_5_reg_532 == 1'd1) & (empty_n_4_reg_513 == 1'd0) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((empty_n_4_reg_513 == 1'd1) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        app_input_data_V_eop_blk_n = app_input_data_V_eop_full_n;
    end else begin
        app_input_data_V_eop_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_278)) begin
        if ((ap_predicate_op68_write_state3 == 1'b1)) begin
            app_input_data_V_eop_din = tmp_eop_reg_527;
        end else if ((ap_predicate_op64_write_state3 == 1'b1)) begin
            app_input_data_V_eop_din = tmp_eop_1_reg_547;
        end else begin
            app_input_data_V_eop_din = 'bx;
        end
    end else begin
        app_input_data_V_eop_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op68_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op64_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        app_input_data_V_len1_update = 1'b1;
    end else begin
        app_input_data_V_len1_update = 1'b0;
    end
end

always @ (*) begin
    if ((((empty_n_5_reg_532 == 1'd1) & (empty_n_4_reg_513 == 1'd0) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((empty_n_4_reg_513 == 1'd1) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        app_input_data_V_len_blk_n = app_input_data_V_len_full_n;
    end else begin
        app_input_data_V_len_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_278)) begin
        if ((ap_predicate_op68_write_state3 == 1'b1)) begin
            app_input_data_V_len_din = tmp_len_reg_522;
        end else if ((ap_predicate_op64_write_state3 == 1'b1)) begin
            app_input_data_V_len_din = tmp_len_1_reg_541;
        end else begin
            app_input_data_V_len_din = 'bx;
        end
    end else begin
        app_input_data_V_len_din = 'bx;
    end
end

always @ (*) begin
    if (((peek_virt_written_bytes_req_V_empty_n == 1'b1) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((ap_phi_mux_reset_phi_fu_286_p4 == 1'd1) | (empty_n_7_fu_369_p1 == 1'd1))) | ((ap_phi_mux_reset_phi_fu_286_p4 == 1'd0) & (empty_n_7_fu_369_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (peek_virt_written_bytes_req_V_empty_n == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))))) begin
        peek_virt_written_bytes_req_V_read = 1'b1;
    end else begin
        peek_virt_written_bytes_req_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((empty_n_6_reg_552 == 1'd1) & (empty_n_7_reg_508 == 1'd0) & (peek_first_half_load_1_reg_556 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((peek_first_half_load_1_reg_556 == 1'd1) & (empty_n_6_reg_552 == 1'd1) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        peek_virt_written_bytes_resp_V_blk_n = peek_virt_written_bytes_resp_V_full_n;
    end else begin
        peek_virt_written_bytes_resp_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_278)) begin
        if ((ap_predicate_op77_write_state3 == 1'b1)) begin
            peek_virt_written_bytes_resp_V_din = {{ap_phi_mux_virt_written_bytes_2_phi_fu_308_p6[63:32]}};
        end else if ((ap_predicate_op74_write_state3 == 1'b1)) begin
            peek_virt_written_bytes_resp_V_din = tmp_1_fu_436_p1;
        end else begin
            peek_virt_written_bytes_resp_V_din = 'bx;
        end
    end else begin
        peek_virt_written_bytes_resp_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op77_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op74_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        peek_virt_written_bytes_resp_V_write = 1'b1;
    end else begin
        peek_virt_written_bytes_resp_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((read_mode_app_input_data_V_len_empty_n & read_mode_app_input_data_V_eop_empty_n & read_mode_app_input_data_V_data_V_empty_n) == 1'b1) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((ap_phi_mux_reset_phi_fu_286_p4 == 1'd1) | (empty_n_7_fu_369_p1 == 1'd1))) | ((ap_phi_mux_reset_phi_fu_286_p4 == 1'd0) & (empty_n_7_fu_369_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))))) begin
        read_mode_app_input_data_V_len0_update = 1'b1;
    end else begin
        read_mode_app_input_data_V_len0_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_phi_mux_reset_phi_fu_286_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (reset_app_input_data_mux_V_empty_n == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        reset_app_input_data_mux_V_read = 1'b1;
    end else begin
        reset_app_input_data_mux_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((write_mode_app_input_data_V_len_empty_n & write_mode_app_input_data_V_eop_empty_n & write_mode_app_input_data_V_data_V_empty_n) == 1'b1) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((ap_phi_mux_reset_phi_fu_286_p4 == 1'd1) | (empty_n_7_fu_369_p1 == 1'd1))) | ((empty_n_4_fu_373_p1 == 1'd0) & (ap_phi_mux_reset_phi_fu_286_p4 == 1'd0) & (empty_n_7_fu_369_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))))) begin
        write_mode_app_input_data_V_len0_update = 1'b1;
    end else begin
        write_mode_app_input_data_V_len0_update = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((peek_virt_written_bytes_resp_V_full_n == 1'b0) & (ap_predicate_op77_write_state3 == 1'b1)) | ((peek_virt_written_bytes_resp_V_full_n == 1'b0) & (ap_predicate_op74_write_state3 == 1'b1)) | ((app_input_data_V_len1_status == 1'b0) & (ap_predicate_op68_write_state3 == 1'b1)) | ((app_input_data_V_len1_status == 1'b0) & (ap_predicate_op64_write_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((peek_virt_written_bytes_resp_V_full_n == 1'b0) & (ap_predicate_op77_write_state3 == 1'b1)) | ((peek_virt_written_bytes_resp_V_full_n == 1'b0) & (ap_predicate_op74_write_state3 == 1'b1)) | ((app_input_data_V_len1_status == 1'b0) & (ap_predicate_op68_write_state3 == 1'b1)) | ((app_input_data_V_len1_status == 1'b0) & (ap_predicate_op64_write_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((peek_virt_written_bytes_resp_V_full_n == 1'b0) & (ap_predicate_op77_write_state3 == 1'b1)) | ((peek_virt_written_bytes_resp_V_full_n == 1'b0) & (ap_predicate_op74_write_state3 == 1'b1)) | ((app_input_data_V_len1_status == 1'b0) & (ap_predicate_op68_write_state3 == 1'b1)) | ((app_input_data_V_len1_status == 1'b0) & (ap_predicate_op64_write_state3 == 1'b1))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((peek_virt_written_bytes_resp_V_full_n == 1'b0) & (ap_predicate_op77_write_state3 == 1'b1)) | ((peek_virt_written_bytes_resp_V_full_n == 1'b0) & (ap_predicate_op74_write_state3 == 1'b1)) | ((app_input_data_V_len1_status == 1'b0) & (ap_predicate_op68_write_state3 == 1'b1)) | ((app_input_data_V_len1_status == 1'b0) & (ap_predicate_op64_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_condition_210 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_278 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = 1'b0;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_reset_1_reg_318 = 'bx;

assign ap_phi_reg_pp0_iter1_reset_3_reg_328 = 'bx;

assign ap_phi_reg_pp0_iter1_virt_written_bytes_2_reg_305 = 'bx;

assign ap_phi_reg_pp0_iter1_virt_written_bytes_3_reg_343 = 'bx;

always @ (*) begin
    ap_predicate_op64_write_state3 = ((empty_n_5_reg_532 == 1'd1) & (empty_n_4_reg_513 == 1'd0) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0));
end

always @ (*) begin
    ap_predicate_op68_write_state3 = ((empty_n_4_reg_513 == 1'd1) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0));
end

always @ (*) begin
    ap_predicate_op74_write_state3 = ((empty_n_6_reg_552 == 1'd1) & (empty_n_7_reg_508 == 1'd0) & (peek_first_half_load_1_reg_556 == 1'd0) & (reset_reg_282 == 1'd0));
end

always @ (*) begin
    ap_predicate_op77_write_state3 = ((peek_first_half_load_1_reg_556 == 1'd1) & (empty_n_6_reg_552 == 1'd1) & (empty_n_7_reg_508 == 1'd0) & (reset_reg_282 == 1'd0));
end

assign ap_ready = 1'b0;

assign app_input_data_V_data_V_write = app_input_data_V_len1_update;

assign app_input_data_V_eop_write = app_input_data_V_len1_update;

assign app_input_data_V_len1_status = (app_input_data_V_len_full_n & app_input_data_V_eop_full_n & app_input_data_V_data_V_full_n);

assign app_input_data_V_len_write = app_input_data_V_len1_update;

assign empty_n_4_fu_373_p1 = grp_nbread_fu_236_p4_0;

assign empty_n_6_fu_405_p1 = peek_virt_written_bytes_req_V_empty_n;

assign empty_n_7_fu_369_p1 = reset_app_input_data_mux_V_empty_n;

assign grp_nbread_fu_236_p4_0 = (read_mode_app_input_data_V_len_empty_n & read_mode_app_input_data_V_eop_empty_n & read_mode_app_input_data_V_data_V_empty_n);

assign grp_nbread_fu_246_p4_0 = (write_mode_app_input_data_V_len_empty_n & write_mode_app_input_data_V_eop_empty_n & write_mode_app_input_data_V_data_V_empty_n);

assign not_s_fu_467_p2 = (tmp_5_fu_461_p2 ^ 1'd1);

assign p_reset_1_fu_473_p2 = (not_s_fu_467_p2 & ap_phi_reg_pp0_iter1_reset_1_reg_318);

assign p_s_fu_480_p3 = ((tmp_5_fu_461_p2[0:0] === 1'b1) ? 32'd0 : reset_cnt_1_fu_455_p2);

assign peek_first_half_1_fu_415_p2 = (peek_first_half_fu_226 ^ 1'd1);

assign read_mode_app_input_data_V_data_V_read = read_mode_app_input_data_V_len0_update;

assign read_mode_app_input_data_V_eop_read = read_mode_app_input_data_V_len0_update;

assign read_mode_app_input_data_V_len_read = read_mode_app_input_data_V_len0_update;

assign reset_cnt_1_fu_455_p2 = (reset_cnt_fu_222 + 32'd1);

assign tmp_1_fu_436_p1 = ap_phi_mux_virt_written_bytes_2_phi_fu_308_p6[31:0];

assign tmp_5_fu_461_p2 = ((reset_cnt_1_fu_455_p2 == 32'd2048) ? 1'b1 : 1'b0);

assign tmp_s_fu_426_p1 = tmp_len_1_reg_541;

assign virt_written_bytes_1_fu_429_p2 = (virt_written_bytes_reg_294 + tmp_s_fu_426_p1);

assign write_mode_app_input_data_V_data_V_read = write_mode_app_input_data_V_len0_update;

assign write_mode_app_input_data_V_eop_read = write_mode_app_input_data_V_len0_update;

assign write_mode_app_input_data_V_len_read = write_mode_app_input_data_V_len0_update;

endmodule //app_input_data_mux
