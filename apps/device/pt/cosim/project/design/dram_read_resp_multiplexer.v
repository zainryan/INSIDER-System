// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dram_read_resp_multiplexer,hls_ip_2017_4_op,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.997000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1617,HLS_SYN_LUT=332}" *)

module dram_read_resp_multiplexer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
ap_continue,
        ap_idle,
        ap_ready,
        host_dram_read_resp_V_last_din,
        host_dram_read_resp_V_last_full_n,
        host_dram_read_resp_V_last_write,
        host_dram_read_resp_V_data_V_din,
        host_dram_read_resp_V_data_V_full_n,
        host_dram_read_resp_V_data_V_write,
        device_dram_read_resp_V_last_din,
        device_dram_read_resp_V_last_full_n,
        device_dram_read_resp_V_last_write,
        device_dram_read_resp_V_data_V_din,
        device_dram_read_resp_V_data_V_full_n,
        device_dram_read_resp_V_data_V_write,
        release_device_dram_resp_buf_flits_V_din,
        release_device_dram_resp_buf_flits_V_full_n,
        release_device_dram_resp_buf_flits_V_write,
        after_throttle_unified_dram_read_resp_V_last_dout,
        after_throttle_unified_dram_read_resp_V_last_empty_n,
        after_throttle_unified_dram_read_resp_V_last_read,
        after_throttle_unified_dram_read_resp_V_data_V_dout,
        after_throttle_unified_dram_read_resp_V_data_V_empty_n,
        after_throttle_unified_dram_read_resp_V_data_V_read,
        dram_read_context_read_V_dout,
        dram_read_context_read_V_empty_n,
        dram_read_context_read_V_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output ap_ready; output ap_continue;
output   host_dram_read_resp_V_last_din;
input   host_dram_read_resp_V_last_full_n;
output   host_dram_read_resp_V_last_write;
output  [511:0] host_dram_read_resp_V_data_V_din;
input   host_dram_read_resp_V_data_V_full_n;
output   host_dram_read_resp_V_data_V_write;
output   device_dram_read_resp_V_last_din;
input   device_dram_read_resp_V_last_full_n;
output   device_dram_read_resp_V_last_write;
output  [511:0] device_dram_read_resp_V_data_V_din;
input   device_dram_read_resp_V_data_V_full_n;
output   device_dram_read_resp_V_data_V_write;
output   release_device_dram_resp_buf_flits_V_din;
input   release_device_dram_resp_buf_flits_V_full_n;
output   release_device_dram_resp_buf_flits_V_write;
input   after_throttle_unified_dram_read_resp_V_last_dout;
input   after_throttle_unified_dram_read_resp_V_last_empty_n;
output   after_throttle_unified_dram_read_resp_V_last_read;
input  [511:0] after_throttle_unified_dram_read_resp_V_data_V_dout;
input   after_throttle_unified_dram_read_resp_V_data_V_empty_n;
output   after_throttle_unified_dram_read_resp_V_data_V_read;
input   dram_read_context_read_V_dout;
input   dram_read_context_read_V_empty_n;
output   dram_read_context_read_V_read;

reg ap_idle;
reg release_device_dram_resp_buf_flits_V_write;
reg dram_read_context_read_V_read;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    host_dram_read_resp_V_last_blk_n;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] brmerge_demorgan_reg_368;
reg   [0:0] ap_reg_pp0_iter2_brmerge_demorgan_reg_368;
reg   [0:0] p_0_load_reg_378;
reg    host_dram_read_resp_V_data_V_blk_n;
reg    device_dram_read_resp_V_last_blk_n;
reg    device_dram_read_resp_V_data_V_blk_n;
reg    release_device_dram_resp_buf_flits_V_blk_n;
reg   [0:0] valid_read_resp_reg_208;
reg   [0:0] ap_reg_pp0_iter1_valid_read_resp_reg_208;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    host_dram_read_resp_V_last1_status;
reg    ap_predicate_op58_write_state5;
wire    device_dram_read_resp_V_last1_status;
reg    ap_predicate_op60_write_state5;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] valid_state_reg_220;
reg   [0:0] valid_state_3_reg_252;
reg   [0:0] ap_phi_mux_valid_read_resp_phi_fu_212_p4;
reg   [511:0] tmp_data_V_3_reg_363;
reg   [511:0] ap_reg_pp0_iter1_tmp_data_V_3_reg_363;
wire   [0:0] brmerge_demorgan_fu_308_p2;
reg   [0:0] tmp_last_load_reg_372;
reg   [0:0] ap_reg_pp0_iter2_tmp_last_load_reg_372;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_phi_mux_valid_read_resp_2_phi_fu_268_p4;
reg   [0:0] ap_phi_mux_valid_state_phi_fu_224_p4;
reg   [0:0] ap_phi_mux_valid_state_1_phi_fu_235_p4;
wire   [0:0] ap_phi_reg_pp0_iter1_valid_state_1_reg_232;
wire   [0:0] ap_phi_reg_pp0_iter0_valid_read_resp_1_reg_242;
reg   [0:0] ap_phi_reg_pp0_iter1_valid_read_resp_1_reg_242;
wire   [0:0] not_s_fu_320_p2;
wire   [0:0] ap_phi_reg_pp0_iter1_valid_state_3_reg_252;
wire   [0:0] ap_phi_reg_pp0_iter1_valid_read_resp_2_reg_264;
reg    after_throttle_unified_dram_read_resp_V_last0_update;
wire   [0:0] empty_n_1_nbread_fu_166_p3_0;
reg    host_dram_read_resp_V_last1_update;
reg    ap_block_pp0_stage0_01001;
reg    device_dram_read_resp_V_last1_update;
reg   [0:0] tmp_fu_154;
reg   [0:0] tmp_last_fu_158;
reg   [511:0] tmp_data_V_fu_162;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_153;
reg    ap_condition_172;
reg    ap_condition_152;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_172)) begin
        if ((ap_phi_mux_valid_read_resp_phi_fu_212_p4 == 1'd0)) begin
            ap_phi_reg_pp0_iter1_valid_read_resp_1_reg_242 <= empty_n_1_nbread_fu_166_p3_0;
        end else if ((ap_phi_mux_valid_read_resp_phi_fu_212_p4 == 1'd1)) begin
            ap_phi_reg_pp0_iter1_valid_read_resp_1_reg_242 <= ap_phi_mux_valid_read_resp_phi_fu_212_p4;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_valid_read_resp_1_reg_242 <= ap_phi_reg_pp0_iter0_valid_read_resp_1_reg_242;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        valid_read_resp_reg_208 <= ap_phi_mux_valid_read_resp_2_phi_fu_268_p4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        valid_read_resp_reg_208 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_152)) begin
        if ((brmerge_demorgan_fu_308_p2 == 1'd0)) begin
            valid_state_3_reg_252 <= ap_phi_mux_valid_state_1_phi_fu_235_p4;
        end else if ((brmerge_demorgan_fu_308_p2 == 1'd1)) begin
            valid_state_3_reg_252 <= not_s_fu_320_p2;
        end else if ((1'b1 == 1'b1)) begin
            valid_state_3_reg_252 <= ap_phi_reg_pp0_iter1_valid_state_3_reg_252;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        valid_state_reg_220 <= valid_state_3_reg_252;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        valid_state_reg_220 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_tmp_data_V_3_reg_363 <= tmp_data_V_3_reg_363;
        ap_reg_pp0_iter1_valid_read_resp_reg_208 <= valid_read_resp_reg_208;
        brmerge_demorgan_reg_368 <= brmerge_demorgan_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_brmerge_demorgan_reg_368 <= brmerge_demorgan_reg_368;
        ap_reg_pp0_iter2_tmp_last_load_reg_372 <= tmp_last_load_reg_372;
    end
end

always @ (posedge ap_clk) begin
    if (((brmerge_demorgan_reg_368 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_0_load_reg_378 <= tmp_fu_154;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_valid_read_resp_phi_fu_212_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_3_reg_363 <= after_throttle_unified_dram_read_resp_V_data_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_valid_read_resp_reg_208 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_fu_162 <= ap_reg_pp0_iter1_tmp_data_V_3_reg_363;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_valid_state_phi_fu_224_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_fu_154 <= dram_read_context_read_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_valid_read_resp_phi_fu_212_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_fu_158 <= after_throttle_unified_dram_read_resp_V_last_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((brmerge_demorgan_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_load_reg_372 <= tmp_last_fu_158;
    end
end

always @ (*) begin
    if (((ap_phi_mux_valid_read_resp_phi_fu_212_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((after_throttle_unified_dram_read_resp_V_last_empty_n & after_throttle_unified_dram_read_resp_V_data_V_empty_n) == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        after_throttle_unified_dram_read_resp_V_last0_update = 1'b1;
    end else begin
        after_throttle_unified_dram_read_resp_V_last0_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_153)) begin
        if ((brmerge_demorgan_fu_308_p2 == 1'd0)) begin
            ap_phi_mux_valid_read_resp_2_phi_fu_268_p4 = ap_phi_reg_pp0_iter1_valid_read_resp_1_reg_242;
        end else if ((brmerge_demorgan_fu_308_p2 == 1'd1)) begin
            ap_phi_mux_valid_read_resp_2_phi_fu_268_p4 = 1'd0;
        end else begin
            ap_phi_mux_valid_read_resp_2_phi_fu_268_p4 = ap_phi_reg_pp0_iter1_valid_read_resp_2_reg_264;
        end
    end else begin
        ap_phi_mux_valid_read_resp_2_phi_fu_268_p4 = ap_phi_reg_pp0_iter1_valid_read_resp_2_reg_264;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_valid_read_resp_phi_fu_212_p4 = ap_phi_mux_valid_read_resp_2_phi_fu_268_p4;
    end else begin
        ap_phi_mux_valid_read_resp_phi_fu_212_p4 = valid_read_resp_reg_208;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_153)) begin
        if ((ap_phi_mux_valid_state_phi_fu_224_p4 == 1'd1)) begin
            ap_phi_mux_valid_state_1_phi_fu_235_p4 = ap_phi_mux_valid_state_phi_fu_224_p4;
        end else if ((ap_phi_mux_valid_state_phi_fu_224_p4 == 1'd0)) begin
            ap_phi_mux_valid_state_1_phi_fu_235_p4 = dram_read_context_read_V_empty_n;
        end else begin
            ap_phi_mux_valid_state_1_phi_fu_235_p4 = ap_phi_reg_pp0_iter1_valid_state_1_reg_232;
        end
    end else begin
        ap_phi_mux_valid_state_1_phi_fu_235_p4 = ap_phi_reg_pp0_iter1_valid_state_1_reg_232;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_valid_state_phi_fu_224_p4 = valid_state_3_reg_252;
    end else begin
        ap_phi_mux_valid_state_phi_fu_224_p4 = valid_state_reg_220;
    end
end

always @ (*) begin
    if (((p_0_load_reg_378 == 1'd1) & (ap_reg_pp0_iter2_brmerge_demorgan_reg_368 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        device_dram_read_resp_V_data_V_blk_n = device_dram_read_resp_V_data_V_full_n;
    end else begin
        device_dram_read_resp_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op60_write_state5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        device_dram_read_resp_V_last1_update = 1'b1;
    end else begin
        device_dram_read_resp_V_last1_update = 1'b0;
    end
end

always @ (*) begin
    if (((p_0_load_reg_378 == 1'd1) & (ap_reg_pp0_iter2_brmerge_demorgan_reg_368 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        device_dram_read_resp_V_last_blk_n = device_dram_read_resp_V_last_full_n;
    end else begin
        device_dram_read_resp_V_last_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_phi_mux_valid_state_phi_fu_224_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (dram_read_context_read_V_empty_n == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dram_read_context_read_V_read = 1'b1;
    end else begin
        dram_read_context_read_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((p_0_load_reg_378 == 1'd0) & (ap_reg_pp0_iter2_brmerge_demorgan_reg_368 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        host_dram_read_resp_V_data_V_blk_n = host_dram_read_resp_V_data_V_full_n;
    end else begin
        host_dram_read_resp_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op58_write_state5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        host_dram_read_resp_V_last1_update = 1'b1;
    end else begin
        host_dram_read_resp_V_last1_update = 1'b0;
    end
end

always @ (*) begin
    if (((p_0_load_reg_378 == 1'd0) & (ap_reg_pp0_iter2_brmerge_demorgan_reg_368 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        host_dram_read_resp_V_last_blk_n = host_dram_read_resp_V_last_full_n;
    end else begin
        host_dram_read_resp_V_last_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_0_load_reg_378 == 1'd1) & (ap_reg_pp0_iter2_brmerge_demorgan_reg_368 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        release_device_dram_resp_buf_flits_V_blk_n = release_device_dram_resp_buf_flits_V_full_n;
    end else begin
        release_device_dram_resp_buf_flits_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op60_write_state5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        release_device_dram_resp_buf_flits_V_write = 1'b1;
    end else begin
        release_device_dram_resp_buf_flits_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign after_throttle_unified_dram_read_resp_V_data_V_read = after_throttle_unified_dram_read_resp_V_last0_update;

assign after_throttle_unified_dram_read_resp_V_last_read = after_throttle_unified_dram_read_resp_V_last0_update;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (((release_device_dram_resp_buf_flits_V_full_n == 1'b0) & (ap_predicate_op60_write_state5 == 1'b1)) | ((device_dram_read_resp_V_last1_status == 1'b0) & (ap_predicate_op60_write_state5 == 1'b1)) | ((host_dram_read_resp_V_last1_status == 1'b0) & (ap_predicate_op58_write_state5 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (((release_device_dram_resp_buf_flits_V_full_n == 1'b0) & (ap_predicate_op60_write_state5 == 1'b1)) | ((device_dram_read_resp_V_last1_status == 1'b0) & (ap_predicate_op60_write_state5 == 1'b1)) | ((host_dram_read_resp_V_last1_status == 1'b0) & (ap_predicate_op58_write_state5 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (((release_device_dram_resp_buf_flits_V_full_n == 1'b0) & (ap_predicate_op60_write_state5 == 1'b1)) | ((device_dram_read_resp_V_last1_status == 1'b0) & (ap_predicate_op60_write_state5 == 1'b1)) | ((host_dram_read_resp_V_last1_status == 1'b0) & (ap_predicate_op58_write_state5 == 1'b1))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = (((release_device_dram_resp_buf_flits_V_full_n == 1'b0) & (ap_predicate_op60_write_state5 == 1'b1)) | ((device_dram_read_resp_V_last1_status == 1'b0) & (ap_predicate_op60_write_state5 == 1'b1)) | ((host_dram_read_resp_V_last1_status == 1'b0) & (ap_predicate_op58_write_state5 == 1'b1)));
end

always @ (*) begin
    ap_condition_152 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_153 = ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_172 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_done = 1'b0;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_valid_read_resp_1_reg_242 = 'bx;

assign ap_phi_reg_pp0_iter1_valid_read_resp_2_reg_264 = 'bx;

assign ap_phi_reg_pp0_iter1_valid_state_1_reg_232 = 'bx;

assign ap_phi_reg_pp0_iter1_valid_state_3_reg_252 = 'bx;

always @ (*) begin
    ap_predicate_op58_write_state5 = ((p_0_load_reg_378 == 1'd0) & (ap_reg_pp0_iter2_brmerge_demorgan_reg_368 == 1'd1));
end

always @ (*) begin
    ap_predicate_op60_write_state5 = ((p_0_load_reg_378 == 1'd1) & (ap_reg_pp0_iter2_brmerge_demorgan_reg_368 == 1'd1));
end

assign ap_ready = 1'b0;

assign brmerge_demorgan_fu_308_p2 = (ap_phi_reg_pp0_iter1_valid_read_resp_1_reg_242 & ap_phi_mux_valid_state_1_phi_fu_235_p4);

assign device_dram_read_resp_V_data_V_din = tmp_data_V_fu_162;

assign device_dram_read_resp_V_data_V_write = device_dram_read_resp_V_last1_update;

assign device_dram_read_resp_V_last1_status = (device_dram_read_resp_V_last_full_n & device_dram_read_resp_V_data_V_full_n);

assign device_dram_read_resp_V_last_din = ap_reg_pp0_iter2_tmp_last_load_reg_372;

assign device_dram_read_resp_V_last_write = device_dram_read_resp_V_last1_update;

assign empty_n_1_nbread_fu_166_p3_0 = (after_throttle_unified_dram_read_resp_V_last_empty_n & after_throttle_unified_dram_read_resp_V_data_V_empty_n);

assign host_dram_read_resp_V_data_V_din = tmp_data_V_fu_162;

assign host_dram_read_resp_V_data_V_write = host_dram_read_resp_V_last1_update;

assign host_dram_read_resp_V_last1_status = (host_dram_read_resp_V_last_full_n & host_dram_read_resp_V_data_V_full_n);

assign host_dram_read_resp_V_last_din = ap_reg_pp0_iter2_tmp_last_load_reg_372;

assign host_dram_read_resp_V_last_write = host_dram_read_resp_V_last1_update;

assign not_s_fu_320_p2 = (tmp_last_fu_158 ^ 1'd1);

assign release_device_dram_resp_buf_flits_V_din = 1'd0;

endmodule //dram_read_resp_multiplexer
